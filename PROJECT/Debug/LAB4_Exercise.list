
LAB4_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003268  08003268  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003268  08003268  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003268  08003268  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000064  080032d4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  080032d4  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009852  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b8d  00000000  00000000  000298df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002b470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c81  00000000  00000000  0002c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba89  00000000  00000000  000435c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082993  00000000  00000000  0004f04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d19dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002abc  00000000  00000000  000d1a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800322c 	.word	0x0800322c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800322c 	.word	0x0800322c

0800014c <subKeyProcess_1>:

int timerForKeyPress_1 = 200;
int timerForKeyPress_2 = 200;
int timerForKeyPress_3 = 200;

void subKeyProcess_1(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess_1+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000080 	.word	0x20000080

08000164 <subKeyProcess_2>:

void subKeyProcess_2(void){
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000168:	4b03      	ldr	r3, [pc, #12]	; (8000178 <subKeyProcess_2+0x14>)
 800016a:	2201      	movs	r2, #1
 800016c:	601a      	str	r2, [r3, #0]
}
 800016e:	bf00      	nop
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000084 	.word	0x20000084

0800017c <subKeyProcess_3>:

void subKeyProcess_3(void){
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <subKeyProcess_3+0x14>)
 8000182:	2201      	movs	r2, #1
 8000184:	601a      	str	r2, [r3, #0]
}
 8000186:	bf00      	nop
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000088 	.word	0x20000088

08000194 <isButton1Pressed>:

int isButton1Pressed(void){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton1Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton1Pressed+0x16>
		button1_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton1Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton1Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000080 	.word	0x20000080

080001b8 <isButton2Pressed>:

int isButton2Pressed(void){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton2Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton2Pressed+0x16>
		button2_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton2Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton2Pressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000084 	.word	0x20000084

080001dc <isButton3Pressed>:

int isButton3Pressed(void){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <isButton3Pressed+0x20>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d104      	bne.n	80001f2 <isButton3Pressed+0x16>
		button3_flag = 0;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <isButton3Pressed+0x20>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
		return 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	e000      	b.n	80001f4 <isButton3Pressed+0x18>
	}
	else return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	20000088 	.word	0x20000088

08000200 <getKeyInput_1>:

void getKeyInput_1(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0_B1 = KeyReg1_B1;
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <getKeyInput_1+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1f      	ldr	r2, [pc, #124]	; (8000288 <getKeyInput_1+0x88>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1_B1 = KeyReg2_B1;
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <getKeyInput_1+0x8c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <getKeyInput_1+0x84>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2_B1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin); //Read current signal of button
 8000214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000218:	481d      	ldr	r0, [pc, #116]	; (8000290 <getKeyInput_1+0x90>)
 800021a:	f001 ffdb 	bl	80021d4 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1a      	ldr	r3, [pc, #104]	; (800028c <getKeyInput_1+0x8c>)
 8000224:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_B1 == KeyReg1_B1) && (KeyReg1_B1 == KeyReg2_B1)){	//Debounce
 8000226:	4b18      	ldr	r3, [pc, #96]	; (8000288 <getKeyInput_1+0x88>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b16      	ldr	r3, [pc, #88]	; (8000284 <getKeyInput_1+0x84>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d125      	bne.n	800027e <getKeyInput_1+0x7e>
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <getKeyInput_1+0x84>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <getKeyInput_1+0x8c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d11f      	bne.n	800027e <getKeyInput_1+0x7e>
		if (KeyReg3_B1 != KeyReg2_B1){
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <getKeyInput_1+0x94>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <getKeyInput_1+0x8c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeyInput_1+0x66>
			KeyReg3_B1 = KeyReg2_B1;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <getKeyInput_1+0x8c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a11      	ldr	r2, [pc, #68]	; (8000294 <getKeyInput_1+0x94>)
 8000250:	6013      	str	r3, [r2, #0]
			if (KeyReg2_B1 == PRESSED_STATE){
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <getKeyInput_1+0x8c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d111      	bne.n	800027e <getKeyInput_1+0x7e>
				subKeyProcess_1();
 800025a:	f7ff ff77 	bl	800014c <subKeyProcess_1>
				timerForKeyPress_1 = 200;
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <getKeyInput_1+0x98>)
 8000260:	22c8      	movs	r2, #200	; 0xc8
 8000262:	601a      	str	r2, [r3, #0]
			if (timerForKeyPress_1 == 0){
				KeyReg3_B1 = NORMAL_STATE;
			}
		}
	}
}
 8000264:	e00b      	b.n	800027e <getKeyInput_1+0x7e>
			timerForKeyPress_1--;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <getKeyInput_1+0x98>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <getKeyInput_1+0x98>)
 800026e:	6013      	str	r3, [r2, #0]
			if (timerForKeyPress_1 == 0){
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <getKeyInput_1+0x98>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <getKeyInput_1+0x7e>
				KeyReg3_B1 = NORMAL_STATE;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <getKeyInput_1+0x94>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000
 800028c:	20000008 	.word	0x20000008
 8000290:	40010c00 	.word	0x40010c00
 8000294:	2000000c 	.word	0x2000000c
 8000298:	20000030 	.word	0x20000030

0800029c <getKeyInput_2>:

void getKeyInput_2(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	KeyReg0_B2 = KeyReg1_B2;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <getKeyInput_2+0x84>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <getKeyInput_2+0x88>)
 80002a6:	6013      	str	r3, [r2, #0]
	KeyReg1_B2 = KeyReg2_B2;
 80002a8:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <getKeyInput_2+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <getKeyInput_2+0x84>)
 80002ae:	6013      	str	r3, [r2, #0]
	KeyReg2_B2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin); //Read current signal of button
 80002b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b4:	481d      	ldr	r0, [pc, #116]	; (800032c <getKeyInput_2+0x90>)
 80002b6:	f001 ff8d 	bl	80021d4 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <getKeyInput_2+0x8c>)
 80002c0:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_B2 == KeyReg1_B2) && (KeyReg1_B2 == KeyReg2_B2)){	//Debounce
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <getKeyInput_2+0x88>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <getKeyInput_2+0x84>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d125      	bne.n	800031a <getKeyInput_2+0x7e>
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <getKeyInput_2+0x84>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <getKeyInput_2+0x8c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d11f      	bne.n	800031a <getKeyInput_2+0x7e>
		if (KeyReg3_B2 != KeyReg2_B2){
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <getKeyInput_2+0x94>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <getKeyInput_2+0x8c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d00d      	beq.n	8000302 <getKeyInput_2+0x66>
			KeyReg3_B2 = KeyReg2_B2;
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <getKeyInput_2+0x8c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a11      	ldr	r2, [pc, #68]	; (8000330 <getKeyInput_2+0x94>)
 80002ec:	6013      	str	r3, [r2, #0]
			if (KeyReg2_B2 == PRESSED_STATE){
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <getKeyInput_2+0x8c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d111      	bne.n	800031a <getKeyInput_2+0x7e>
				subKeyProcess_2();
 80002f6:	f7ff ff35 	bl	8000164 <subKeyProcess_2>
				timerForKeyPress_2 = 200;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <getKeyInput_2+0x98>)
 80002fc:	22c8      	movs	r2, #200	; 0xc8
 80002fe:	601a      	str	r2, [r3, #0]
			if (timerForKeyPress_2 == 0){
				KeyReg3_B2 = NORMAL_STATE;
			}
		}
	}
}
 8000300:	e00b      	b.n	800031a <getKeyInput_2+0x7e>
			timerForKeyPress_2--;
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <getKeyInput_2+0x98>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <getKeyInput_2+0x98>)
 800030a:	6013      	str	r3, [r2, #0]
			if (timerForKeyPress_2 == 0){
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <getKeyInput_2+0x98>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKeyInput_2+0x7e>
				KeyReg3_B2 = NORMAL_STATE;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <getKeyInput_2+0x94>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000014 	.word	0x20000014
 8000324:	20000010 	.word	0x20000010
 8000328:	20000018 	.word	0x20000018
 800032c:	40010c00 	.word	0x40010c00
 8000330:	2000001c 	.word	0x2000001c
 8000334:	20000034 	.word	0x20000034

08000338 <getKeyInput_3>:

void getKeyInput_3(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	KeyReg0_B3 = KeyReg1_B3;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <getKeyInput_3+0x84>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <getKeyInput_3+0x88>)
 8000342:	6013      	str	r3, [r2, #0]
	KeyReg1_B3 = KeyReg2_B3;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <getKeyInput_3+0x8c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <getKeyInput_3+0x84>)
 800034a:	6013      	str	r3, [r2, #0]
	KeyReg2_B3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin); //Read current signal of button
 800034c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000350:	481d      	ldr	r0, [pc, #116]	; (80003c8 <getKeyInput_3+0x90>)
 8000352:	f001 ff3f 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <getKeyInput_3+0x8c>)
 800035c:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_B3 == KeyReg1_B3) && (KeyReg1_B3 == KeyReg2_B3)){	//Debounce
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <getKeyInput_3+0x88>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <getKeyInput_3+0x84>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d125      	bne.n	80003b6 <getKeyInput_3+0x7e>
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <getKeyInput_3+0x84>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <getKeyInput_3+0x8c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	429a      	cmp	r2, r3
 8000374:	d11f      	bne.n	80003b6 <getKeyInput_3+0x7e>
		if (KeyReg3_B3 != KeyReg2_B3){
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <getKeyInput_3+0x94>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <getKeyInput_3+0x8c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d00d      	beq.n	800039e <getKeyInput_3+0x66>
			KeyReg3_B3 = KeyReg2_B3;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <getKeyInput_3+0x8c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a11      	ldr	r2, [pc, #68]	; (80003cc <getKeyInput_3+0x94>)
 8000388:	6013      	str	r3, [r2, #0]
			if (KeyReg2_B3 == PRESSED_STATE){
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <getKeyInput_3+0x8c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d111      	bne.n	80003b6 <getKeyInput_3+0x7e>
				subKeyProcess_3();
 8000392:	f7ff fef3 	bl	800017c <subKeyProcess_3>
				timerForKeyPress_3 = 200;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <getKeyInput_3+0x98>)
 8000398:	22c8      	movs	r2, #200	; 0xc8
 800039a:	601a      	str	r2, [r3, #0]
			if (timerForKeyPress_3 == 0){
				KeyReg3_B3 = NORMAL_STATE;
			}
		}
	}
}
 800039c:	e00b      	b.n	80003b6 <getKeyInput_3+0x7e>
			timerForKeyPress_3--;
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <getKeyInput_3+0x98>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <getKeyInput_3+0x98>)
 80003a6:	6013      	str	r3, [r2, #0]
			if (timerForKeyPress_3 == 0){
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <getKeyInput_3+0x98>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d102      	bne.n	80003b6 <getKeyInput_3+0x7e>
				KeyReg3_B3 = NORMAL_STATE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <getKeyInput_3+0x94>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000024 	.word	0x20000024
 80003c0:	20000020 	.word	0x20000020
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	2000002c 	.word	0x2000002c
 80003d0:	20000038 	.word	0x20000038

080003d4 <init7SEG>:

int index_led = 0;
int led_buffer_X[2] = {0, 0};
int led_buffer_Y[2] = {0, 0};

void init7SEG(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2180      	movs	r1, #128	; 0x80
 80003dc:	4825      	ldr	r0, [pc, #148]	; (8000474 <init7SEG+0xa0>)
 80003de:	f001 ff10 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e8:	4822      	ldr	r0, [pc, #136]	; (8000474 <init7SEG+0xa0>)
 80003ea:	f001 ff0a 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f4:	481f      	ldr	r0, [pc, #124]	; (8000474 <init7SEG+0xa0>)
 80003f6:	f001 ff04 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000400:	481c      	ldr	r0, [pc, #112]	; (8000474 <init7SEG+0xa0>)
 8000402:	f001 fefe 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800040c:	4819      	ldr	r0, [pc, #100]	; (8000474 <init7SEG+0xa0>)
 800040e:	f001 fef8 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000418:	4816      	ldr	r0, [pc, #88]	; (8000474 <init7SEG+0xa0>)
 800041a:	f001 fef2 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000424:	4813      	ldr	r0, [pc, #76]	; (8000474 <init7SEG+0xa0>)
 8000426:	f001 feec 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, SET);
 800042a:	2201      	movs	r2, #1
 800042c:	2101      	movs	r1, #1
 800042e:	4812      	ldr	r0, [pc, #72]	; (8000478 <init7SEG+0xa4>)
 8000430:	f001 fee7 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, SET);
 8000434:	2201      	movs	r2, #1
 8000436:	2102      	movs	r1, #2
 8000438:	480f      	ldr	r0, [pc, #60]	; (8000478 <init7SEG+0xa4>)
 800043a:	f001 fee2 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, SET);
 800043e:	2201      	movs	r2, #1
 8000440:	2104      	movs	r1, #4
 8000442:	480d      	ldr	r0, [pc, #52]	; (8000478 <init7SEG+0xa4>)
 8000444:	f001 fedd 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2108      	movs	r1, #8
 800044c:	480a      	ldr	r0, [pc, #40]	; (8000478 <init7SEG+0xa4>)
 800044e:	f001 fed8 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2110      	movs	r1, #16
 8000456:	4808      	ldr	r0, [pc, #32]	; (8000478 <init7SEG+0xa4>)
 8000458:	f001 fed3 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2120      	movs	r1, #32
 8000460:	4805      	ldr	r0, [pc, #20]	; (8000478 <init7SEG+0xa4>)
 8000462:	f001 fece 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, SET);
 8000466:	2201      	movs	r2, #1
 8000468:	2140      	movs	r1, #64	; 0x40
 800046a:	4803      	ldr	r0, [pc, #12]	; (8000478 <init7SEG+0xa4>)
 800046c:	f001 fec9 	bl	8002202 <HAL_GPIO_WritePin>
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40010800 	.word	0x40010800
 8000478:	40010c00 	.word	0x40010c00

0800047c <display7SEG_X>:

void display7SEG_X(int number){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b09      	cmp	r3, #9
 8000488:	f200 81bc 	bhi.w	8000804 <display7SEG_X+0x388>
 800048c:	a201      	add	r2, pc, #4	; (adr r2, 8000494 <display7SEG_X+0x18>)
 800048e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000492:	bf00      	nop
 8000494:	080004bd 	.word	0x080004bd
 8000498:	08000511 	.word	0x08000511
 800049c:	08000565 	.word	0x08000565
 80004a0:	080005b9 	.word	0x080005b9
 80004a4:	0800060d 	.word	0x0800060d
 80004a8:	08000661 	.word	0x08000661
 80004ac:	080006b5 	.word	0x080006b5
 80004b0:	08000709 	.word	0x08000709
 80004b4:	0800075d 	.word	0x0800075d
 80004b8:	080007b1 	.word	0x080007b1
	switch(number){
	case 0:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	48d3      	ldr	r0, [pc, #844]	; (8000810 <display7SEG_X+0x394>)
 80004c2:	f001 fe9e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004cc:	48d0      	ldr	r0, [pc, #832]	; (8000810 <display7SEG_X+0x394>)
 80004ce:	f001 fe98 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d8:	48cd      	ldr	r0, [pc, #820]	; (8000810 <display7SEG_X+0x394>)
 80004da:	f001 fe92 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e4:	48ca      	ldr	r0, [pc, #808]	; (8000810 <display7SEG_X+0x394>)
 80004e6:	f001 fe8c 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f0:	48c7      	ldr	r0, [pc, #796]	; (8000810 <display7SEG_X+0x394>)
 80004f2:	f001 fe86 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fc:	48c4      	ldr	r0, [pc, #784]	; (8000810 <display7SEG_X+0x394>)
 80004fe:	f001 fe80 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, SET);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000508:	48c1      	ldr	r0, [pc, #772]	; (8000810 <display7SEG_X+0x394>)
 800050a:	f001 fe7a 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 800050e:	e17a      	b.n	8000806 <display7SEG_X+0x38a>
	case 1:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	48be      	ldr	r0, [pc, #760]	; (8000810 <display7SEG_X+0x394>)
 8000516:	f001 fe74 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000520:	48bb      	ldr	r0, [pc, #748]	; (8000810 <display7SEG_X+0x394>)
 8000522:	f001 fe6e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052c:	48b8      	ldr	r0, [pc, #736]	; (8000810 <display7SEG_X+0x394>)
 800052e:	f001 fe68 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, SET);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000538:	48b5      	ldr	r0, [pc, #724]	; (8000810 <display7SEG_X+0x394>)
 800053a:	f001 fe62 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000544:	48b2      	ldr	r0, [pc, #712]	; (8000810 <display7SEG_X+0x394>)
 8000546:	f001 fe5c 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000550:	48af      	ldr	r0, [pc, #700]	; (8000810 <display7SEG_X+0x394>)
 8000552:	f001 fe56 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	48ac      	ldr	r0, [pc, #688]	; (8000810 <display7SEG_X+0x394>)
 800055e:	f001 fe50 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 8000562:	e150      	b.n	8000806 <display7SEG_X+0x38a>
	case 2:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	48a9      	ldr	r0, [pc, #676]	; (8000810 <display7SEG_X+0x394>)
 800056a:	f001 fe4a 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	48a6      	ldr	r0, [pc, #664]	; (8000810 <display7SEG_X+0x394>)
 8000576:	f001 fe44 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, SET);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000580:	48a3      	ldr	r0, [pc, #652]	; (8000810 <display7SEG_X+0x394>)
 8000582:	f001 fe3e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058c:	48a0      	ldr	r0, [pc, #640]	; (8000810 <display7SEG_X+0x394>)
 800058e:	f001 fe38 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000598:	489d      	ldr	r0, [pc, #628]	; (8000810 <display7SEG_X+0x394>)
 800059a:	f001 fe32 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a4:	489a      	ldr	r0, [pc, #616]	; (8000810 <display7SEG_X+0x394>)
 80005a6:	f001 fe2c 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	4897      	ldr	r0, [pc, #604]	; (8000810 <display7SEG_X+0x394>)
 80005b2:	f001 fe26 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 80005b6:	e126      	b.n	8000806 <display7SEG_X+0x38a>
	case 3:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	4894      	ldr	r0, [pc, #592]	; (8000810 <display7SEG_X+0x394>)
 80005be:	f001 fe20 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c8:	4891      	ldr	r0, [pc, #580]	; (8000810 <display7SEG_X+0x394>)
 80005ca:	f001 fe1a 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d4:	488e      	ldr	r0, [pc, #568]	; (8000810 <display7SEG_X+0x394>)
 80005d6:	f001 fe14 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e0:	488b      	ldr	r0, [pc, #556]	; (8000810 <display7SEG_X+0x394>)
 80005e2:	f001 fe0e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	4888      	ldr	r0, [pc, #544]	; (8000810 <display7SEG_X+0x394>)
 80005ee:	f001 fe08 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	4885      	ldr	r0, [pc, #532]	; (8000810 <display7SEG_X+0x394>)
 80005fa:	f001 fe02 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000604:	4882      	ldr	r0, [pc, #520]	; (8000810 <display7SEG_X+0x394>)
 8000606:	f001 fdfc 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 800060a:	e0fc      	b.n	8000806 <display7SEG_X+0x38a>
	case 4:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	487f      	ldr	r0, [pc, #508]	; (8000810 <display7SEG_X+0x394>)
 8000612:	f001 fdf6 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	487c      	ldr	r0, [pc, #496]	; (8000810 <display7SEG_X+0x394>)
 800061e:	f001 fdf0 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	4879      	ldr	r0, [pc, #484]	; (8000810 <display7SEG_X+0x394>)
 800062a:	f001 fdea 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	4876      	ldr	r0, [pc, #472]	; (8000810 <display7SEG_X+0x394>)
 8000636:	f001 fde4 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000640:	4873      	ldr	r0, [pc, #460]	; (8000810 <display7SEG_X+0x394>)
 8000642:	f001 fdde 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	4870      	ldr	r0, [pc, #448]	; (8000810 <display7SEG_X+0x394>)
 800064e:	f001 fdd8 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	486d      	ldr	r0, [pc, #436]	; (8000810 <display7SEG_X+0x394>)
 800065a:	f001 fdd2 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 800065e:	e0d2      	b.n	8000806 <display7SEG_X+0x38a>
	case 5:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	486a      	ldr	r0, [pc, #424]	; (8000810 <display7SEG_X+0x394>)
 8000666:	f001 fdcc 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	4867      	ldr	r0, [pc, #412]	; (8000810 <display7SEG_X+0x394>)
 8000672:	f001 fdc6 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	4864      	ldr	r0, [pc, #400]	; (8000810 <display7SEG_X+0x394>)
 800067e:	f001 fdc0 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000688:	4861      	ldr	r0, [pc, #388]	; (8000810 <display7SEG_X+0x394>)
 800068a:	f001 fdba 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000694:	485e      	ldr	r0, [pc, #376]	; (8000810 <display7SEG_X+0x394>)
 8000696:	f001 fdb4 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	485b      	ldr	r0, [pc, #364]	; (8000810 <display7SEG_X+0x394>)
 80006a2:	f001 fdae 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	4858      	ldr	r0, [pc, #352]	; (8000810 <display7SEG_X+0x394>)
 80006ae:	f001 fda8 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 80006b2:	e0a8      	b.n	8000806 <display7SEG_X+0x38a>
	case 6:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	4855      	ldr	r0, [pc, #340]	; (8000810 <display7SEG_X+0x394>)
 80006ba:	f001 fda2 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c4:	4852      	ldr	r0, [pc, #328]	; (8000810 <display7SEG_X+0x394>)
 80006c6:	f001 fd9c 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d0:	484f      	ldr	r0, [pc, #316]	; (8000810 <display7SEG_X+0x394>)
 80006d2:	f001 fd96 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	484c      	ldr	r0, [pc, #304]	; (8000810 <display7SEG_X+0x394>)
 80006de:	f001 fd90 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e8:	4849      	ldr	r0, [pc, #292]	; (8000810 <display7SEG_X+0x394>)
 80006ea:	f001 fd8a 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f4:	4846      	ldr	r0, [pc, #280]	; (8000810 <display7SEG_X+0x394>)
 80006f6:	f001 fd84 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000700:	4843      	ldr	r0, [pc, #268]	; (8000810 <display7SEG_X+0x394>)
 8000702:	f001 fd7e 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 8000706:	e07e      	b.n	8000806 <display7SEG_X+0x38a>
	case 7:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	4840      	ldr	r0, [pc, #256]	; (8000810 <display7SEG_X+0x394>)
 800070e:	f001 fd78 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000718:	483d      	ldr	r0, [pc, #244]	; (8000810 <display7SEG_X+0x394>)
 800071a:	f001 fd72 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000724:	483a      	ldr	r0, [pc, #232]	; (8000810 <display7SEG_X+0x394>)
 8000726:	f001 fd6c 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000730:	4837      	ldr	r0, [pc, #220]	; (8000810 <display7SEG_X+0x394>)
 8000732:	f001 fd66 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800073c:	4834      	ldr	r0, [pc, #208]	; (8000810 <display7SEG_X+0x394>)
 800073e:	f001 fd60 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000748:	4831      	ldr	r0, [pc, #196]	; (8000810 <display7SEG_X+0x394>)
 800074a:	f001 fd5a 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000754:	482e      	ldr	r0, [pc, #184]	; (8000810 <display7SEG_X+0x394>)
 8000756:	f001 fd54 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 800075a:	e054      	b.n	8000806 <display7SEG_X+0x38a>
	case 8:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	482b      	ldr	r0, [pc, #172]	; (8000810 <display7SEG_X+0x394>)
 8000762:	f001 fd4e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4828      	ldr	r0, [pc, #160]	; (8000810 <display7SEG_X+0x394>)
 800076e:	f001 fd48 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000778:	4825      	ldr	r0, [pc, #148]	; (8000810 <display7SEG_X+0x394>)
 800077a:	f001 fd42 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000784:	4822      	ldr	r0, [pc, #136]	; (8000810 <display7SEG_X+0x394>)
 8000786:	f001 fd3c 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000790:	481f      	ldr	r0, [pc, #124]	; (8000810 <display7SEG_X+0x394>)
 8000792:	f001 fd36 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <display7SEG_X+0x394>)
 800079e:	f001 fd30 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a8:	4819      	ldr	r0, [pc, #100]	; (8000810 <display7SEG_X+0x394>)
 80007aa:	f001 fd2a 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 80007ae:	e02a      	b.n	8000806 <display7SEG_X+0x38a>
	case 9:
		HAL_GPIO_WritePin(SEG0_X_GPIO_Port, SEG0_X_Pin, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	4816      	ldr	r0, [pc, #88]	; (8000810 <display7SEG_X+0x394>)
 80007b6:	f001 fd24 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_X_GPIO_Port, SEG1_X_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c0:	4813      	ldr	r0, [pc, #76]	; (8000810 <display7SEG_X+0x394>)
 80007c2:	f001 fd1e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_X_GPIO_Port, SEG2_X_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007cc:	4810      	ldr	r0, [pc, #64]	; (8000810 <display7SEG_X+0x394>)
 80007ce:	f001 fd18 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_X_GPIO_Port, SEG3_X_Pin, RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <display7SEG_X+0x394>)
 80007da:	f001 fd12 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_X_GPIO_Port, SEG4_X_Pin, SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <display7SEG_X+0x394>)
 80007e6:	f001 fd0c 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_X_GPIO_Port, SEG5_X_Pin, RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <display7SEG_X+0x394>)
 80007f2:	f001 fd06 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_X_GPIO_Port, SEG6_X_Pin, RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <display7SEG_X+0x394>)
 80007fe:	f001 fd00 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 8000802:	e000      	b.n	8000806 <display7SEG_X+0x38a>
	default:
		break;
 8000804:	bf00      	nop
	}
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010800 	.word	0x40010800

08000814 <display7SEG_Y>:

void display7SEG_Y(int number){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b09      	cmp	r3, #9
 8000820:	f200 8180 	bhi.w	8000b24 <display7SEG_Y+0x310>
 8000824:	a201      	add	r2, pc, #4	; (adr r2, 800082c <display7SEG_Y+0x18>)
 8000826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082a:	bf00      	nop
 800082c:	08000855 	.word	0x08000855
 8000830:	0800089d 	.word	0x0800089d
 8000834:	080008e5 	.word	0x080008e5
 8000838:	0800092d 	.word	0x0800092d
 800083c:	08000975 	.word	0x08000975
 8000840:	080009bd 	.word	0x080009bd
 8000844:	08000a05 	.word	0x08000a05
 8000848:	08000a4d 	.word	0x08000a4d
 800084c:	08000a95 	.word	0x08000a95
 8000850:	08000add 	.word	0x08000add
	switch(number){
	case 0:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	48b5      	ldr	r0, [pc, #724]	; (8000b30 <display7SEG_Y+0x31c>)
 800085a:	f001 fcd2 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2102      	movs	r1, #2
 8000862:	48b3      	ldr	r0, [pc, #716]	; (8000b30 <display7SEG_Y+0x31c>)
 8000864:	f001 fccd 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	48b0      	ldr	r0, [pc, #704]	; (8000b30 <display7SEG_Y+0x31c>)
 800086e:	f001 fcc8 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	48ae      	ldr	r0, [pc, #696]	; (8000b30 <display7SEG_Y+0x31c>)
 8000878:	f001 fcc3 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	48ab      	ldr	r0, [pc, #684]	; (8000b30 <display7SEG_Y+0x31c>)
 8000882:	f001 fcbe 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2120      	movs	r1, #32
 800088a:	48a9      	ldr	r0, [pc, #676]	; (8000b30 <display7SEG_Y+0x31c>)
 800088c:	f001 fcb9 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2140      	movs	r1, #64	; 0x40
 8000894:	48a6      	ldr	r0, [pc, #664]	; (8000b30 <display7SEG_Y+0x31c>)
 8000896:	f001 fcb4 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 800089a:	e144      	b.n	8000b26 <display7SEG_Y+0x312>
	case 1:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2101      	movs	r1, #1
 80008a0:	48a3      	ldr	r0, [pc, #652]	; (8000b30 <display7SEG_Y+0x31c>)
 80008a2:	f001 fcae 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2102      	movs	r1, #2
 80008aa:	48a1      	ldr	r0, [pc, #644]	; (8000b30 <display7SEG_Y+0x31c>)
 80008ac:	f001 fca9 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2104      	movs	r1, #4
 80008b4:	489e      	ldr	r0, [pc, #632]	; (8000b30 <display7SEG_Y+0x31c>)
 80008b6:	f001 fca4 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2108      	movs	r1, #8
 80008be:	489c      	ldr	r0, [pc, #624]	; (8000b30 <display7SEG_Y+0x31c>)
 80008c0:	f001 fc9f 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2110      	movs	r1, #16
 80008c8:	4899      	ldr	r0, [pc, #612]	; (8000b30 <display7SEG_Y+0x31c>)
 80008ca:	f001 fc9a 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2120      	movs	r1, #32
 80008d2:	4897      	ldr	r0, [pc, #604]	; (8000b30 <display7SEG_Y+0x31c>)
 80008d4:	f001 fc95 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	4894      	ldr	r0, [pc, #592]	; (8000b30 <display7SEG_Y+0x31c>)
 80008de:	f001 fc90 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 80008e2:	e120      	b.n	8000b26 <display7SEG_Y+0x312>
	case 2:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2101      	movs	r1, #1
 80008e8:	4891      	ldr	r0, [pc, #580]	; (8000b30 <display7SEG_Y+0x31c>)
 80008ea:	f001 fc8a 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2102      	movs	r1, #2
 80008f2:	488f      	ldr	r0, [pc, #572]	; (8000b30 <display7SEG_Y+0x31c>)
 80008f4:	f001 fc85 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2104      	movs	r1, #4
 80008fc:	488c      	ldr	r0, [pc, #560]	; (8000b30 <display7SEG_Y+0x31c>)
 80008fe:	f001 fc80 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2108      	movs	r1, #8
 8000906:	488a      	ldr	r0, [pc, #552]	; (8000b30 <display7SEG_Y+0x31c>)
 8000908:	f001 fc7b 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2110      	movs	r1, #16
 8000910:	4887      	ldr	r0, [pc, #540]	; (8000b30 <display7SEG_Y+0x31c>)
 8000912:	f001 fc76 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2120      	movs	r1, #32
 800091a:	4885      	ldr	r0, [pc, #532]	; (8000b30 <display7SEG_Y+0x31c>)
 800091c:	f001 fc71 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	4882      	ldr	r0, [pc, #520]	; (8000b30 <display7SEG_Y+0x31c>)
 8000926:	f001 fc6c 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 800092a:	e0fc      	b.n	8000b26 <display7SEG_Y+0x312>
	case 3:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2101      	movs	r1, #1
 8000930:	487f      	ldr	r0, [pc, #508]	; (8000b30 <display7SEG_Y+0x31c>)
 8000932:	f001 fc66 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2102      	movs	r1, #2
 800093a:	487d      	ldr	r0, [pc, #500]	; (8000b30 <display7SEG_Y+0x31c>)
 800093c:	f001 fc61 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2104      	movs	r1, #4
 8000944:	487a      	ldr	r0, [pc, #488]	; (8000b30 <display7SEG_Y+0x31c>)
 8000946:	f001 fc5c 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2108      	movs	r1, #8
 800094e:	4878      	ldr	r0, [pc, #480]	; (8000b30 <display7SEG_Y+0x31c>)
 8000950:	f001 fc57 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2110      	movs	r1, #16
 8000958:	4875      	ldr	r0, [pc, #468]	; (8000b30 <display7SEG_Y+0x31c>)
 800095a:	f001 fc52 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2120      	movs	r1, #32
 8000962:	4873      	ldr	r0, [pc, #460]	; (8000b30 <display7SEG_Y+0x31c>)
 8000964:	f001 fc4d 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	4870      	ldr	r0, [pc, #448]	; (8000b30 <display7SEG_Y+0x31c>)
 800096e:	f001 fc48 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 8000972:	e0d8      	b.n	8000b26 <display7SEG_Y+0x312>
	case 4:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2101      	movs	r1, #1
 8000978:	486d      	ldr	r0, [pc, #436]	; (8000b30 <display7SEG_Y+0x31c>)
 800097a:	f001 fc42 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	486b      	ldr	r0, [pc, #428]	; (8000b30 <display7SEG_Y+0x31c>)
 8000984:	f001 fc3d 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2104      	movs	r1, #4
 800098c:	4868      	ldr	r0, [pc, #416]	; (8000b30 <display7SEG_Y+0x31c>)
 800098e:	f001 fc38 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2108      	movs	r1, #8
 8000996:	4866      	ldr	r0, [pc, #408]	; (8000b30 <display7SEG_Y+0x31c>)
 8000998:	f001 fc33 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2110      	movs	r1, #16
 80009a0:	4863      	ldr	r0, [pc, #396]	; (8000b30 <display7SEG_Y+0x31c>)
 80009a2:	f001 fc2e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	4861      	ldr	r0, [pc, #388]	; (8000b30 <display7SEG_Y+0x31c>)
 80009ac:	f001 fc29 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	485e      	ldr	r0, [pc, #376]	; (8000b30 <display7SEG_Y+0x31c>)
 80009b6:	f001 fc24 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 80009ba:	e0b4      	b.n	8000b26 <display7SEG_Y+0x312>
	case 5:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2101      	movs	r1, #1
 80009c0:	485b      	ldr	r0, [pc, #364]	; (8000b30 <display7SEG_Y+0x31c>)
 80009c2:	f001 fc1e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2102      	movs	r1, #2
 80009ca:	4859      	ldr	r0, [pc, #356]	; (8000b30 <display7SEG_Y+0x31c>)
 80009cc:	f001 fc19 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2104      	movs	r1, #4
 80009d4:	4856      	ldr	r0, [pc, #344]	; (8000b30 <display7SEG_Y+0x31c>)
 80009d6:	f001 fc14 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2108      	movs	r1, #8
 80009de:	4854      	ldr	r0, [pc, #336]	; (8000b30 <display7SEG_Y+0x31c>)
 80009e0:	f001 fc0f 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2110      	movs	r1, #16
 80009e8:	4851      	ldr	r0, [pc, #324]	; (8000b30 <display7SEG_Y+0x31c>)
 80009ea:	f001 fc0a 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2120      	movs	r1, #32
 80009f2:	484f      	ldr	r0, [pc, #316]	; (8000b30 <display7SEG_Y+0x31c>)
 80009f4:	f001 fc05 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	484c      	ldr	r0, [pc, #304]	; (8000b30 <display7SEG_Y+0x31c>)
 80009fe:	f001 fc00 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 8000a02:	e090      	b.n	8000b26 <display7SEG_Y+0x312>
	case 6:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2101      	movs	r1, #1
 8000a08:	4849      	ldr	r0, [pc, #292]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a0a:	f001 fbfa 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2102      	movs	r1, #2
 8000a12:	4847      	ldr	r0, [pc, #284]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a14:	f001 fbf5 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4844      	ldr	r0, [pc, #272]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a1e:	f001 fbf0 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2108      	movs	r1, #8
 8000a26:	4842      	ldr	r0, [pc, #264]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a28:	f001 fbeb 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2110      	movs	r1, #16
 8000a30:	483f      	ldr	r0, [pc, #252]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a32:	f001 fbe6 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2120      	movs	r1, #32
 8000a3a:	483d      	ldr	r0, [pc, #244]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a3c:	f001 fbe1 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2140      	movs	r1, #64	; 0x40
 8000a44:	483a      	ldr	r0, [pc, #232]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a46:	f001 fbdc 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 8000a4a:	e06c      	b.n	8000b26 <display7SEG_Y+0x312>
	case 7:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4837      	ldr	r0, [pc, #220]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a52:	f001 fbd6 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4835      	ldr	r0, [pc, #212]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a5c:	f001 fbd1 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2104      	movs	r1, #4
 8000a64:	4832      	ldr	r0, [pc, #200]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a66:	f001 fbcc 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	4830      	ldr	r0, [pc, #192]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a70:	f001 fbc7 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2110      	movs	r1, #16
 8000a78:	482d      	ldr	r0, [pc, #180]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a7a:	f001 fbc2 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2120      	movs	r1, #32
 8000a82:	482b      	ldr	r0, [pc, #172]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a84:	f001 fbbd 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	4828      	ldr	r0, [pc, #160]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a8e:	f001 fbb8 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 8000a92:	e048      	b.n	8000b26 <display7SEG_Y+0x312>
	case 8:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2101      	movs	r1, #1
 8000a98:	4825      	ldr	r0, [pc, #148]	; (8000b30 <display7SEG_Y+0x31c>)
 8000a9a:	f001 fbb2 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4823      	ldr	r0, [pc, #140]	; (8000b30 <display7SEG_Y+0x31c>)
 8000aa4:	f001 fbad 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2104      	movs	r1, #4
 8000aac:	4820      	ldr	r0, [pc, #128]	; (8000b30 <display7SEG_Y+0x31c>)
 8000aae:	f001 fba8 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	481e      	ldr	r0, [pc, #120]	; (8000b30 <display7SEG_Y+0x31c>)
 8000ab8:	f001 fba3 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2110      	movs	r1, #16
 8000ac0:	481b      	ldr	r0, [pc, #108]	; (8000b30 <display7SEG_Y+0x31c>)
 8000ac2:	f001 fb9e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4819      	ldr	r0, [pc, #100]	; (8000b30 <display7SEG_Y+0x31c>)
 8000acc:	f001 fb99 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	4816      	ldr	r0, [pc, #88]	; (8000b30 <display7SEG_Y+0x31c>)
 8000ad6:	f001 fb94 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 8000ada:	e024      	b.n	8000b26 <display7SEG_Y+0x312>
	case 9:
		HAL_GPIO_WritePin(SEG0_Y_GPIO_Port, SEG0_Y_Pin, RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4813      	ldr	r0, [pc, #76]	; (8000b30 <display7SEG_Y+0x31c>)
 8000ae2:	f001 fb8e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_Y_GPIO_Port, SEG1_Y_Pin, RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <display7SEG_Y+0x31c>)
 8000aec:	f001 fb89 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_Y_GPIO_Port, SEG2_Y_Pin, RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2104      	movs	r1, #4
 8000af4:	480e      	ldr	r0, [pc, #56]	; (8000b30 <display7SEG_Y+0x31c>)
 8000af6:	f001 fb84 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_Y_GPIO_Port, SEG3_Y_Pin, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2108      	movs	r1, #8
 8000afe:	480c      	ldr	r0, [pc, #48]	; (8000b30 <display7SEG_Y+0x31c>)
 8000b00:	f001 fb7f 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_Y_GPIO_Port, SEG4_Y_Pin, SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2110      	movs	r1, #16
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <display7SEG_Y+0x31c>)
 8000b0a:	f001 fb7a 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_Y_GPIO_Port, SEG5_Y_Pin, RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2120      	movs	r1, #32
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <display7SEG_Y+0x31c>)
 8000b14:	f001 fb75 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_Y_GPIO_Port, SEG6_Y_Pin, RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <display7SEG_Y+0x31c>)
 8000b1e:	f001 fb70 	bl	8002202 <HAL_GPIO_WritePin>
		break;
 8000b22:	e000      	b.n	8000b26 <display7SEG_Y+0x312>
	default:
		break;
 8000b24:	bf00      	nop
	}
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <update7SEG>:

void update7SEG(int index){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	switch(index){
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <update7SEG+0x16>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d022      	beq.n	8000b8e <update7SEG+0x5a>
		HAL_GPIO_WritePin(EN1_Y_GPIO_Port, EN1_Y_Pin, RESET);
		display7SEG_Y(led_buffer_Y[1]);
		display7SEG_X(led_buffer_X[1]);
		break;
	default:
		break;
 8000b48:	e043      	b.n	8000bd2 <update7SEG+0x9e>
		HAL_GPIO_WritePin(EN0_X_GPIO_Port, EN0_X_Pin, RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b50:	4822      	ldr	r0, [pc, #136]	; (8000bdc <update7SEG+0xa8>)
 8000b52:	f001 fb56 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_X_GPIO_Port, EN1_X_Pin, SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5c:	481f      	ldr	r0, [pc, #124]	; (8000bdc <update7SEG+0xa8>)
 8000b5e:	f001 fb50 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_Y_GPIO_Port, EN0_Y_Pin, RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	481e      	ldr	r0, [pc, #120]	; (8000be0 <update7SEG+0xac>)
 8000b68:	f001 fb4b 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_Y_GPIO_Port, EN1_Y_Pin, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b72:	481b      	ldr	r0, [pc, #108]	; (8000be0 <update7SEG+0xac>)
 8000b74:	f001 fb45 	bl	8002202 <HAL_GPIO_WritePin>
		display7SEG_Y(led_buffer_Y[0]);
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <update7SEG+0xb0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fe49 	bl	8000814 <display7SEG_Y>
		display7SEG_X(led_buffer_X[0]);
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <update7SEG+0xb4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fc78 	bl	800047c <display7SEG_X>
		break;
 8000b8c:	e021      	b.n	8000bd2 <update7SEG+0x9e>
		HAL_GPIO_WritePin(EN0_X_GPIO_Port, EN0_X_Pin, SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b94:	4811      	ldr	r0, [pc, #68]	; (8000bdc <update7SEG+0xa8>)
 8000b96:	f001 fb34 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_X_GPIO_Port, EN1_X_Pin, RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba0:	480e      	ldr	r0, [pc, #56]	; (8000bdc <update7SEG+0xa8>)
 8000ba2:	f001 fb2e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_Y_GPIO_Port, EN0_Y_Pin, SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <update7SEG+0xac>)
 8000bac:	f001 fb29 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_Y_GPIO_Port, EN1_Y_Pin, RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	480a      	ldr	r0, [pc, #40]	; (8000be0 <update7SEG+0xac>)
 8000bb8:	f001 fb23 	bl	8002202 <HAL_GPIO_WritePin>
		display7SEG_Y(led_buffer_Y[1]);
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <update7SEG+0xb0>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fe27 	bl	8000814 <display7SEG_Y>
		display7SEG_X(led_buffer_X[1]);
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <update7SEG+0xb4>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fc56 	bl	800047c <display7SEG_X>
		break;
 8000bd0:	bf00      	nop
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	20000098 	.word	0x20000098
 8000be8:	20000090 	.word	0x20000090

08000bec <updateBufferOption>:

void updateBufferOption(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	if (current_mode == 1){
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <updateBufferOption+0x24>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d102      	bne.n	8000bfe <updateBufferOption+0x12>
		updateBufferClock();
 8000bf8:	f000 f80c 	bl	8000c14 <updateBufferClock>
	}
	else if (current_mode != 1){
		updateBufferMode();
	}
}
 8000bfc:	e005      	b.n	8000c0a <updateBufferOption+0x1e>
	else if (current_mode != 1){
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <updateBufferOption+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d001      	beq.n	8000c0a <updateBufferOption+0x1e>
		updateBufferMode();
 8000c06:	f000 f875 	bl	8000cf4 <updateBufferMode>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000048 	.word	0x20000048

08000c14 <updateBufferClock>:

void updateBufferClock(void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	if (clock_X < 10){
 8000c18:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <updateBufferClock+0xc8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b09      	cmp	r3, #9
 8000c1e:	dc06      	bgt.n	8000c2e <updateBufferClock+0x1a>
		led_buffer_X[0] = 0;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <updateBufferClock+0xcc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
		led_buffer_X[1] = clock_X;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <updateBufferClock+0xc8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <updateBufferClock+0xcc>)
 8000c2c:	6053      	str	r3, [r2, #4]
	}
	if (clock_X >= 10){
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <updateBufferClock+0xc8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b09      	cmp	r3, #9
 8000c34:	dd18      	ble.n	8000c68 <updateBufferClock+0x54>
		led_buffer_X[0] = clock_X / 10;
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <updateBufferClock+0xc8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ce4 <updateBufferClock+0xd0>)
 8000c3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c40:	1092      	asrs	r2, r2, #2
 8000c42:	17db      	asrs	r3, r3, #31
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	4a26      	ldr	r2, [pc, #152]	; (8000ce0 <updateBufferClock+0xcc>)
 8000c48:	6013      	str	r3, [r2, #0]
		led_buffer_X[1] = clock_X % 10;
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <updateBufferClock+0xc8>)
 8000c4c:	6819      	ldr	r1, [r3, #0]
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <updateBufferClock+0xd0>)
 8000c50:	fb83 2301 	smull	r2, r3, r3, r1
 8000c54:	109a      	asrs	r2, r3, #2
 8000c56:	17cb      	asrs	r3, r1, #31
 8000c58:	1ad2      	subs	r2, r2, r3
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	1aca      	subs	r2, r1, r3
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <updateBufferClock+0xcc>)
 8000c66:	605a      	str	r2, [r3, #4]
	}
	if (clock_Y < 10){
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <updateBufferClock+0xd4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b09      	cmp	r3, #9
 8000c6e:	dc06      	bgt.n	8000c7e <updateBufferClock+0x6a>
		led_buffer_Y[0] = 0;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <updateBufferClock+0xd8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
		led_buffer_Y[1] = clock_Y;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <updateBufferClock+0xd4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <updateBufferClock+0xd8>)
 8000c7c:	6053      	str	r3, [r2, #4]
	}
	if (clock_Y >= 10){
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <updateBufferClock+0xd4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b09      	cmp	r3, #9
 8000c84:	dd18      	ble.n	8000cb8 <updateBufferClock+0xa4>
		led_buffer_Y[0] = clock_Y / 10;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <updateBufferClock+0xd4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <updateBufferClock+0xd0>)
 8000c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c90:	1092      	asrs	r2, r2, #2
 8000c92:	17db      	asrs	r3, r3, #31
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <updateBufferClock+0xd8>)
 8000c98:	6013      	str	r3, [r2, #0]
		led_buffer_Y[1] = clock_Y % 10;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <updateBufferClock+0xd4>)
 8000c9c:	6819      	ldr	r1, [r3, #0]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <updateBufferClock+0xd0>)
 8000ca0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ca4:	109a      	asrs	r2, r3, #2
 8000ca6:	17cb      	asrs	r3, r1, #31
 8000ca8:	1ad2      	subs	r2, r2, r3
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	1aca      	subs	r2, r1, r3
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <updateBufferClock+0xd8>)
 8000cb6:	605a      	str	r2, [r3, #4]
	}
	update7SEG(index_led++);
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <updateBufferClock+0xdc>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <updateBufferClock+0xdc>)
 8000cc0:	600a      	str	r2, [r1, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff36 	bl	8000b34 <update7SEG>
	if (index_led > 1){
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <updateBufferClock+0xdc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	dd02      	ble.n	8000cd6 <updateBufferClock+0xc2>
		index_led = 0;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <updateBufferClock+0xdc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000a8 	.word	0x200000a8
 8000ce0:	20000090 	.word	0x20000090
 8000ce4:	66666667 	.word	0x66666667
 8000ce8:	200000ac 	.word	0x200000ac
 8000cec:	20000098 	.word	0x20000098
 8000cf0:	2000008c 	.word	0x2000008c

08000cf4 <updateBufferMode>:

void updateBufferMode(void){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	led_buffer_X[0] = 0;
 8000cf8:	4b4d      	ldr	r3, [pc, #308]	; (8000e30 <updateBufferMode+0x13c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
	led_buffer_X[1] = current_mode;
 8000cfe:	4b4d      	ldr	r3, [pc, #308]	; (8000e34 <updateBufferMode+0x140>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a4b      	ldr	r2, [pc, #300]	; (8000e30 <updateBufferMode+0x13c>)
 8000d04:	6053      	str	r3, [r2, #4]
	if (current_mode == 2){
 8000d06:	4b4b      	ldr	r3, [pc, #300]	; (8000e34 <updateBufferMode+0x140>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d127      	bne.n	8000d5e <updateBufferMode+0x6a>
		if (time_for_red < 10){
 8000d0e:	4b4a      	ldr	r3, [pc, #296]	; (8000e38 <updateBufferMode+0x144>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b09      	cmp	r3, #9
 8000d14:	dc06      	bgt.n	8000d24 <updateBufferMode+0x30>
			led_buffer_Y[0] = 0;
 8000d16:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <updateBufferMode+0x148>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
			led_buffer_Y[1] = time_for_red;
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <updateBufferMode+0x144>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a46      	ldr	r2, [pc, #280]	; (8000e3c <updateBufferMode+0x148>)
 8000d22:	6053      	str	r3, [r2, #4]
		}
		if (time_for_red >= 10){
 8000d24:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <updateBufferMode+0x144>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b09      	cmp	r3, #9
 8000d2a:	dd18      	ble.n	8000d5e <updateBufferMode+0x6a>
			led_buffer_Y[0] = time_for_red / 10;
 8000d2c:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <updateBufferMode+0x144>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a43      	ldr	r2, [pc, #268]	; (8000e40 <updateBufferMode+0x14c>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	1092      	asrs	r2, r2, #2
 8000d38:	17db      	asrs	r3, r3, #31
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	4a3f      	ldr	r2, [pc, #252]	; (8000e3c <updateBufferMode+0x148>)
 8000d3e:	6013      	str	r3, [r2, #0]
			led_buffer_Y[1] = time_for_red % 10;
 8000d40:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <updateBufferMode+0x144>)
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <updateBufferMode+0x14c>)
 8000d46:	fb83 2301 	smull	r2, r3, r3, r1
 8000d4a:	109a      	asrs	r2, r3, #2
 8000d4c:	17cb      	asrs	r3, r1, #31
 8000d4e:	1ad2      	subs	r2, r2, r3
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	1aca      	subs	r2, r1, r3
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <updateBufferMode+0x148>)
 8000d5c:	605a      	str	r2, [r3, #4]
		}
	}
	if (current_mode == 3){
 8000d5e:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <updateBufferMode+0x140>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d127      	bne.n	8000db6 <updateBufferMode+0xc2>
		if (time_for_yellow < 10){
 8000d66:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <updateBufferMode+0x150>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b09      	cmp	r3, #9
 8000d6c:	dc06      	bgt.n	8000d7c <updateBufferMode+0x88>
			led_buffer_Y[0] = 0;
 8000d6e:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <updateBufferMode+0x148>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
			led_buffer_Y[1] = time_for_yellow;
 8000d74:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <updateBufferMode+0x150>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a30      	ldr	r2, [pc, #192]	; (8000e3c <updateBufferMode+0x148>)
 8000d7a:	6053      	str	r3, [r2, #4]
		}
		if (time_for_yellow >= 10){
 8000d7c:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <updateBufferMode+0x150>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	dd18      	ble.n	8000db6 <updateBufferMode+0xc2>
			led_buffer_Y[0] = time_for_yellow / 10;
 8000d84:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <updateBufferMode+0x150>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a2d      	ldr	r2, [pc, #180]	; (8000e40 <updateBufferMode+0x14c>)
 8000d8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d8e:	1092      	asrs	r2, r2, #2
 8000d90:	17db      	asrs	r3, r3, #31
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <updateBufferMode+0x148>)
 8000d96:	6013      	str	r3, [r2, #0]
			led_buffer_Y[1] = time_for_yellow % 10;
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <updateBufferMode+0x150>)
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <updateBufferMode+0x14c>)
 8000d9e:	fb83 2301 	smull	r2, r3, r3, r1
 8000da2:	109a      	asrs	r2, r3, #2
 8000da4:	17cb      	asrs	r3, r1, #31
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	1aca      	subs	r2, r1, r3
 8000db2:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <updateBufferMode+0x148>)
 8000db4:	605a      	str	r2, [r3, #4]
		}
	}
	if (current_mode == 4){
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <updateBufferMode+0x140>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	d127      	bne.n	8000e0e <updateBufferMode+0x11a>
		if (time_for_green < 10){
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <updateBufferMode+0x154>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b09      	cmp	r3, #9
 8000dc4:	dc06      	bgt.n	8000dd4 <updateBufferMode+0xe0>
			led_buffer_Y[0] = 0;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <updateBufferMode+0x148>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
			led_buffer_Y[1] = time_for_green;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <updateBufferMode+0x154>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <updateBufferMode+0x148>)
 8000dd2:	6053      	str	r3, [r2, #4]
		}
		if (time_for_red >= 10){
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <updateBufferMode+0x144>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b09      	cmp	r3, #9
 8000dda:	dd18      	ble.n	8000e0e <updateBufferMode+0x11a>
			led_buffer_Y[0] = time_for_green / 10;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <updateBufferMode+0x154>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <updateBufferMode+0x14c>)
 8000de2:	fb82 1203 	smull	r1, r2, r2, r3
 8000de6:	1092      	asrs	r2, r2, #2
 8000de8:	17db      	asrs	r3, r3, #31
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <updateBufferMode+0x148>)
 8000dee:	6013      	str	r3, [r2, #0]
			led_buffer_Y[1] = time_for_green % 10;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <updateBufferMode+0x154>)
 8000df2:	6819      	ldr	r1, [r3, #0]
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <updateBufferMode+0x14c>)
 8000df6:	fb83 2301 	smull	r2, r3, r3, r1
 8000dfa:	109a      	asrs	r2, r3, #2
 8000dfc:	17cb      	asrs	r3, r1, #31
 8000dfe:	1ad2      	subs	r2, r2, r3
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	1aca      	subs	r2, r1, r3
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <updateBufferMode+0x148>)
 8000e0c:	605a      	str	r2, [r3, #4]
		}
	}
	update7SEG(index_led++);
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <updateBufferMode+0x158>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	490d      	ldr	r1, [pc, #52]	; (8000e4c <updateBufferMode+0x158>)
 8000e16:	600a      	str	r2, [r1, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe8b 	bl	8000b34 <update7SEG>
	if (index_led > 1){
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <updateBufferMode+0x158>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	dd02      	ble.n	8000e2c <updateBufferMode+0x138>
		index_led = 0;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <updateBufferMode+0x158>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000090 	.word	0x20000090
 8000e34:	20000048 	.word	0x20000048
 8000e38:	2000003c 	.word	0x2000003c
 8000e3c:	20000098 	.word	0x20000098
 8000e40:	66666667 	.word	0x66666667
 8000e44:	20000040 	.word	0x20000040
 8000e48:	20000044 	.word	0x20000044
 8000e4c:	2000008c 	.word	0x2000008c

08000e50 <countdown>:
int counter_Y = 0;
int counter_idle = 1000;
int clock_X = 0;
int clock_Y = 0;

void countdown(void){
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	clock_X--;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <countdown+0x20>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <countdown+0x20>)
 8000e5c:	6013      	str	r3, [r2, #0]
	clock_Y--;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <countdown+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <countdown+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	200000a8 	.word	0x200000a8
 8000e74:	200000ac 	.word	0x200000ac

08000e78 <fsm_automatic_run>:

void fsm_automatic_run(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	switch(status){
 8000e7c:	4bad      	ldr	r3, [pc, #692]	; (8001134 <fsm_automatic_run+0x2bc>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3b0d      	subs	r3, #13
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	f200 8153 	bhi.w	800112e <fsm_automatic_run+0x2b6>
 8000e88:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <fsm_automatic_run+0x18>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000ea5 	.word	0x08000ea5
 8000e94:	08000f15 	.word	0x08000f15
 8000e98:	08000f8d 	.word	0x08000f8d
 8000e9c:	08001025 	.word	0x08001025
 8000ea0:	0800109b 	.word	0x0800109b
	case INIT:
		HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	48a3      	ldr	r0, [pc, #652]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000eaa:	f001 f9aa 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	48a1      	ldr	r0, [pc, #644]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000eb4:	f001 f9a5 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2108      	movs	r1, #8
 8000ebc:	489e      	ldr	r0, [pc, #632]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000ebe:	f001 f9a0 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	489c      	ldr	r0, [pc, #624]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000ec8:	f001 f99b 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4899      	ldr	r0, [pc, #612]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000ed2:	f001 f996 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2140      	movs	r1, #64	; 0x40
 8000eda:	4897      	ldr	r0, [pc, #604]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000edc:	f001 f991 	bl	8002202 <HAL_GPIO_WritePin>
		status = AUTO_RED_X_GREEN_Y;
 8000ee0:	4b94      	ldr	r3, [pc, #592]	; (8001134 <fsm_automatic_run+0x2bc>)
 8000ee2:	220e      	movs	r2, #14
 8000ee4:	601a      	str	r2, [r3, #0]
		clock_X = time_for_red;
 8000ee6:	4b95      	ldr	r3, [pc, #596]	; (800113c <fsm_automatic_run+0x2c4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a95      	ldr	r2, [pc, #596]	; (8001140 <fsm_automatic_run+0x2c8>)
 8000eec:	6013      	str	r3, [r2, #0]
		clock_Y = time_for_green;
 8000eee:	4b95      	ldr	r3, [pc, #596]	; (8001144 <fsm_automatic_run+0x2cc>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a95      	ldr	r2, [pc, #596]	; (8001148 <fsm_automatic_run+0x2d0>)
 8000ef4:	6013      	str	r3, [r2, #0]
		counter_X = time_for_red * 50;
 8000ef6:	4b91      	ldr	r3, [pc, #580]	; (800113c <fsm_automatic_run+0x2c4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2232      	movs	r2, #50	; 0x32
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	4a92      	ldr	r2, [pc, #584]	; (800114c <fsm_automatic_run+0x2d4>)
 8000f02:	6013      	str	r3, [r2, #0]
		counter_Y = time_for_green * 50;
 8000f04:	4b8f      	ldr	r3, [pc, #572]	; (8001144 <fsm_automatic_run+0x2cc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2232      	movs	r2, #50	; 0x32
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	4a90      	ldr	r2, [pc, #576]	; (8001150 <fsm_automatic_run+0x2d8>)
 8000f10:	6013      	str	r3, [r2, #0]
		break;
 8000f12:	e128      	b.n	8001166 <fsm_automatic_run+0x2ee>

	case AUTO_RED_X_GREEN_Y:
		HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2102      	movs	r1, #2
 8000f18:	4887      	ldr	r0, [pc, #540]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000f1a:	f001 f972 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2104      	movs	r1, #4
 8000f22:	4885      	ldr	r0, [pc, #532]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000f24:	f001 f96d 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	4882      	ldr	r0, [pc, #520]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000f2e:	f001 f968 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2110      	movs	r1, #16
 8000f36:	4880      	ldr	r0, [pc, #512]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000f38:	f001 f963 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2120      	movs	r1, #32
 8000f40:	487d      	ldr	r0, [pc, #500]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000f42:	f001 f95e 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2140      	movs	r1, #64	; 0x40
 8000f4a:	487b      	ldr	r0, [pc, #492]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000f4c:	f001 f959 	bl	8002202 <HAL_GPIO_WritePin>
		counter_X--;
 8000f50:	4b7e      	ldr	r3, [pc, #504]	; (800114c <fsm_automatic_run+0x2d4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	4a7d      	ldr	r2, [pc, #500]	; (800114c <fsm_automatic_run+0x2d4>)
 8000f58:	6013      	str	r3, [r2, #0]
		counter_Y--;
 8000f5a:	4b7d      	ldr	r3, [pc, #500]	; (8001150 <fsm_automatic_run+0x2d8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	4a7b      	ldr	r2, [pc, #492]	; (8001150 <fsm_automatic_run+0x2d8>)
 8000f62:	6013      	str	r3, [r2, #0]
		if (counter_Y <= 0){
 8000f64:	4b7a      	ldr	r3, [pc, #488]	; (8001150 <fsm_automatic_run+0x2d8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f300 80f5 	bgt.w	8001158 <fsm_automatic_run+0x2e0>
			status = AUTO_RED_X_YELLOW_Y;
 8000f6e:	4b71      	ldr	r3, [pc, #452]	; (8001134 <fsm_automatic_run+0x2bc>)
 8000f70:	220f      	movs	r2, #15
 8000f72:	601a      	str	r2, [r3, #0]
			counter_Y = time_for_yellow * 50;
 8000f74:	4b77      	ldr	r3, [pc, #476]	; (8001154 <fsm_automatic_run+0x2dc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2232      	movs	r2, #50	; 0x32
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	4a74      	ldr	r2, [pc, #464]	; (8001150 <fsm_automatic_run+0x2d8>)
 8000f80:	6013      	str	r3, [r2, #0]
			clock_Y = time_for_yellow;
 8000f82:	4b74      	ldr	r3, [pc, #464]	; (8001154 <fsm_automatic_run+0x2dc>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a70      	ldr	r2, [pc, #448]	; (8001148 <fsm_automatic_run+0x2d0>)
 8000f88:	6013      	str	r3, [r2, #0]
		}
		break;
 8000f8a:	e0e5      	b.n	8001158 <fsm_automatic_run+0x2e0>

	case AUTO_RED_X_YELLOW_Y:
		HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4869      	ldr	r0, [pc, #420]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000f92:	f001 f936 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4867      	ldr	r0, [pc, #412]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000f9c:	f001 f931 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	4864      	ldr	r0, [pc, #400]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000fa6:	f001 f92c 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2110      	movs	r1, #16
 8000fae:	4862      	ldr	r0, [pc, #392]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000fb0:	f001 f927 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	485f      	ldr	r0, [pc, #380]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000fba:	f001 f922 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2140      	movs	r1, #64	; 0x40
 8000fc2:	485d      	ldr	r0, [pc, #372]	; (8001138 <fsm_automatic_run+0x2c0>)
 8000fc4:	f001 f91d 	bl	8002202 <HAL_GPIO_WritePin>
		counter_X--;
 8000fc8:	4b60      	ldr	r3, [pc, #384]	; (800114c <fsm_automatic_run+0x2d4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4a5f      	ldr	r2, [pc, #380]	; (800114c <fsm_automatic_run+0x2d4>)
 8000fd0:	6013      	str	r3, [r2, #0]
		counter_Y--;
 8000fd2:	4b5f      	ldr	r3, [pc, #380]	; (8001150 <fsm_automatic_run+0x2d8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	4a5d      	ldr	r2, [pc, #372]	; (8001150 <fsm_automatic_run+0x2d8>)
 8000fda:	6013      	str	r3, [r2, #0]
		if (counter_X <= 0 && counter_Y <= 0){
 8000fdc:	4b5b      	ldr	r3, [pc, #364]	; (800114c <fsm_automatic_run+0x2d4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f300 80bb 	bgt.w	800115c <fsm_automatic_run+0x2e4>
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	; (8001150 <fsm_automatic_run+0x2d8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f300 80b6 	bgt.w	800115c <fsm_automatic_run+0x2e4>
			status = AUTO_GREEN_X_RED_Y;
 8000ff0:	4b50      	ldr	r3, [pc, #320]	; (8001134 <fsm_automatic_run+0x2bc>)
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	601a      	str	r2, [r3, #0]
			counter_X = time_for_green * 50;
 8000ff6:	4b53      	ldr	r3, [pc, #332]	; (8001144 <fsm_automatic_run+0x2cc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2232      	movs	r2, #50	; 0x32
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	4a52      	ldr	r2, [pc, #328]	; (800114c <fsm_automatic_run+0x2d4>)
 8001002:	6013      	str	r3, [r2, #0]
			counter_Y = time_for_red * 50;
 8001004:	4b4d      	ldr	r3, [pc, #308]	; (800113c <fsm_automatic_run+0x2c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2232      	movs	r2, #50	; 0x32
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	4a50      	ldr	r2, [pc, #320]	; (8001150 <fsm_automatic_run+0x2d8>)
 8001010:	6013      	str	r3, [r2, #0]
			clock_X = time_for_green;
 8001012:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <fsm_automatic_run+0x2cc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <fsm_automatic_run+0x2c8>)
 8001018:	6013      	str	r3, [r2, #0]
			clock_Y = time_for_red;
 800101a:	4b48      	ldr	r3, [pc, #288]	; (800113c <fsm_automatic_run+0x2c4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <fsm_automatic_run+0x2d0>)
 8001020:	6013      	str	r3, [r2, #0]
		}
		break;
 8001022:	e09b      	b.n	800115c <fsm_automatic_run+0x2e4>

	case AUTO_GREEN_X_RED_Y:
		HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2102      	movs	r1, #2
 8001028:	4843      	ldr	r0, [pc, #268]	; (8001138 <fsm_automatic_run+0x2c0>)
 800102a:	f001 f8ea 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	2104      	movs	r1, #4
 8001032:	4841      	ldr	r0, [pc, #260]	; (8001138 <fsm_automatic_run+0x2c0>)
 8001034:	f001 f8e5 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2108      	movs	r1, #8
 800103c:	483e      	ldr	r0, [pc, #248]	; (8001138 <fsm_automatic_run+0x2c0>)
 800103e:	f001 f8e0 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2110      	movs	r1, #16
 8001046:	483c      	ldr	r0, [pc, #240]	; (8001138 <fsm_automatic_run+0x2c0>)
 8001048:	f001 f8db 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2120      	movs	r1, #32
 8001050:	4839      	ldr	r0, [pc, #228]	; (8001138 <fsm_automatic_run+0x2c0>)
 8001052:	f001 f8d6 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2140      	movs	r1, #64	; 0x40
 800105a:	4837      	ldr	r0, [pc, #220]	; (8001138 <fsm_automatic_run+0x2c0>)
 800105c:	f001 f8d1 	bl	8002202 <HAL_GPIO_WritePin>
		counter_X--;
 8001060:	4b3a      	ldr	r3, [pc, #232]	; (800114c <fsm_automatic_run+0x2d4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3b01      	subs	r3, #1
 8001066:	4a39      	ldr	r2, [pc, #228]	; (800114c <fsm_automatic_run+0x2d4>)
 8001068:	6013      	str	r3, [r2, #0]
		counter_Y--;
 800106a:	4b39      	ldr	r3, [pc, #228]	; (8001150 <fsm_automatic_run+0x2d8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	4a37      	ldr	r2, [pc, #220]	; (8001150 <fsm_automatic_run+0x2d8>)
 8001072:	6013      	str	r3, [r2, #0]
		if (counter_X <= 0){
 8001074:	4b35      	ldr	r3, [pc, #212]	; (800114c <fsm_automatic_run+0x2d4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	dc71      	bgt.n	8001160 <fsm_automatic_run+0x2e8>
			status = AUTO_YELLOW_X_RED_Y;
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <fsm_automatic_run+0x2bc>)
 800107e:	2211      	movs	r2, #17
 8001080:	601a      	str	r2, [r3, #0]
			counter_X = time_for_yellow * 50;
 8001082:	4b34      	ldr	r3, [pc, #208]	; (8001154 <fsm_automatic_run+0x2dc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2232      	movs	r2, #50	; 0x32
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	4a2f      	ldr	r2, [pc, #188]	; (800114c <fsm_automatic_run+0x2d4>)
 800108e:	6013      	str	r3, [r2, #0]
			clock_X = time_for_yellow;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <fsm_automatic_run+0x2dc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <fsm_automatic_run+0x2c8>)
 8001096:	6013      	str	r3, [r2, #0]
		}
		break;
 8001098:	e062      	b.n	8001160 <fsm_automatic_run+0x2e8>
	case AUTO_YELLOW_X_RED_Y:
		HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2102      	movs	r1, #2
 800109e:	4826      	ldr	r0, [pc, #152]	; (8001138 <fsm_automatic_run+0x2c0>)
 80010a0:	f001 f8af 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2104      	movs	r1, #4
 80010a8:	4823      	ldr	r0, [pc, #140]	; (8001138 <fsm_automatic_run+0x2c0>)
 80010aa:	f001 f8aa 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2108      	movs	r1, #8
 80010b2:	4821      	ldr	r0, [pc, #132]	; (8001138 <fsm_automatic_run+0x2c0>)
 80010b4:	f001 f8a5 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2110      	movs	r1, #16
 80010bc:	481e      	ldr	r0, [pc, #120]	; (8001138 <fsm_automatic_run+0x2c0>)
 80010be:	f001 f8a0 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2120      	movs	r1, #32
 80010c6:	481c      	ldr	r0, [pc, #112]	; (8001138 <fsm_automatic_run+0x2c0>)
 80010c8:	f001 f89b 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	4819      	ldr	r0, [pc, #100]	; (8001138 <fsm_automatic_run+0x2c0>)
 80010d2:	f001 f896 	bl	8002202 <HAL_GPIO_WritePin>
		counter_X--;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <fsm_automatic_run+0x2d4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3b01      	subs	r3, #1
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <fsm_automatic_run+0x2d4>)
 80010de:	6013      	str	r3, [r2, #0]
		counter_Y--;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <fsm_automatic_run+0x2d8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <fsm_automatic_run+0x2d8>)
 80010e8:	6013      	str	r3, [r2, #0]
		if (counter_X <= 0 && counter_Y <= 0){
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <fsm_automatic_run+0x2d4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dc38      	bgt.n	8001164 <fsm_automatic_run+0x2ec>
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <fsm_automatic_run+0x2d8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	dc34      	bgt.n	8001164 <fsm_automatic_run+0x2ec>
			status = AUTO_RED_X_GREEN_Y;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <fsm_automatic_run+0x2bc>)
 80010fc:	220e      	movs	r2, #14
 80010fe:	601a      	str	r2, [r3, #0]
			counter_X = time_for_red * 50;
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <fsm_automatic_run+0x2c4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2232      	movs	r2, #50	; 0x32
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <fsm_automatic_run+0x2d4>)
 800110c:	6013      	str	r3, [r2, #0]
			counter_Y = time_for_green * 50;
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <fsm_automatic_run+0x2cc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2232      	movs	r2, #50	; 0x32
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <fsm_automatic_run+0x2d8>)
 800111a:	6013      	str	r3, [r2, #0]
			clock_X = time_for_red;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <fsm_automatic_run+0x2c4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <fsm_automatic_run+0x2c8>)
 8001122:	6013      	str	r3, [r2, #0]
			clock_Y = time_for_green;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <fsm_automatic_run+0x2cc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <fsm_automatic_run+0x2d0>)
 800112a:	6013      	str	r3, [r2, #0]
		}
		break;
 800112c:	e01a      	b.n	8001164 <fsm_automatic_run+0x2ec>

	default:
		break;
 800112e:	bf00      	nop
 8001130:	e019      	b.n	8001166 <fsm_automatic_run+0x2ee>
 8001132:	bf00      	nop
 8001134:	200000bc 	.word	0x200000bc
 8001138:	40010800 	.word	0x40010800
 800113c:	2000003c 	.word	0x2000003c
 8001140:	200000a8 	.word	0x200000a8
 8001144:	20000044 	.word	0x20000044
 8001148:	200000ac 	.word	0x200000ac
 800114c:	200000a0 	.word	0x200000a0
 8001150:	200000a4 	.word	0x200000a4
 8001154:	20000040 	.word	0x20000040
		break;
 8001158:	bf00      	nop
 800115a:	e004      	b.n	8001166 <fsm_automatic_run+0x2ee>
		break;
 800115c:	bf00      	nop
 800115e:	e002      	b.n	8001166 <fsm_automatic_run+0x2ee>
		break;
 8001160:	bf00      	nop
 8001162:	e000      	b.n	8001166 <fsm_automatic_run+0x2ee>
		break;
 8001164:	bf00      	nop
	}
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop

0800116c <modifyRedLED>:
int not_save_flag_green = 0;
int save_value_red = 5;
int save_value_yellow = 2;
int save_value_green = 3;

void modifyRedLED(void){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2104      	movs	r1, #4
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <modifyRedLED+0x40>)
 8001176:	f001 f844 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	2108      	movs	r1, #8
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <modifyRedLED+0x40>)
 8001180:	f001 f83f 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	2120      	movs	r1, #32
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <modifyRedLED+0x40>)
 800118a:	f001 f83a 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2140      	movs	r1, #64	; 0x40
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <modifyRedLED+0x40>)
 8001194:	f001 f835 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(RED_X_GPIO_Port, RED_X_Pin);
 8001198:	2102      	movs	r1, #2
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <modifyRedLED+0x40>)
 800119c:	f001 f849 	bl	8002232 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED_Y_GPIO_Port, RED_Y_Pin);
 80011a0:	2110      	movs	r1, #16
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <modifyRedLED+0x40>)
 80011a4:	f001 f845 	bl	8002232 <HAL_GPIO_TogglePin>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40010800 	.word	0x40010800

080011b0 <modifyYellowLED>:

void modifyYellowLED(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2102      	movs	r1, #2
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <modifyYellowLED+0x40>)
 80011ba:	f001 f822 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2108      	movs	r1, #8
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <modifyYellowLED+0x40>)
 80011c4:	f001 f81d 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2110      	movs	r1, #16
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <modifyYellowLED+0x40>)
 80011ce:	f001 f818 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2140      	movs	r1, #64	; 0x40
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <modifyYellowLED+0x40>)
 80011d8:	f001 f813 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin);
 80011dc:	2104      	movs	r1, #4
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <modifyYellowLED+0x40>)
 80011e0:	f001 f827 	bl	8002232 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin);
 80011e4:	2120      	movs	r1, #32
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <modifyYellowLED+0x40>)
 80011e8:	f001 f823 	bl	8002232 <HAL_GPIO_TogglePin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40010800 	.word	0x40010800

080011f4 <modifyGreenLED>:

void modifyGreenLED(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2104      	movs	r1, #4
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <modifyGreenLED+0x40>)
 80011fe:	f001 f800 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2102      	movs	r1, #2
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <modifyGreenLED+0x40>)
 8001208:	f000 fffb 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2120      	movs	r1, #32
 8001210:	4808      	ldr	r0, [pc, #32]	; (8001234 <modifyGreenLED+0x40>)
 8001212:	f000 fff6 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2110      	movs	r1, #16
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <modifyGreenLED+0x40>)
 800121c:	f000 fff1 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GREEN_X_GPIO_Port, GREEN_X_Pin);
 8001220:	2108      	movs	r1, #8
 8001222:	4804      	ldr	r0, [pc, #16]	; (8001234 <modifyGreenLED+0x40>)
 8001224:	f001 f805 	bl	8002232 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin);
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	4802      	ldr	r0, [pc, #8]	; (8001234 <modifyGreenLED+0x40>)
 800122c:	f001 f801 	bl	8002232 <HAL_GPIO_TogglePin>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40010800 	.word	0x40010800

08001238 <change_mode>:

void change_mode(void){
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	if (isButton1Pressed()){
 800123c:	f7fe ffaa 	bl	8000194 <isButton1Pressed>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d02f      	beq.n	80012a6 <change_mode+0x6e>
		if(current_mode == 2){
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <change_mode+0x74>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d107      	bne.n	800125e <change_mode+0x26>
			if (not_save_flag_red == 1){
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <change_mode+0x78>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d103      	bne.n	800125e <change_mode+0x26>
				time_for_red = save_value_red;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <change_mode+0x7c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <change_mode+0x80>)
 800125c:	6013      	str	r3, [r2, #0]
			}
		}
		if(current_mode == 3){
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <change_mode+0x74>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d107      	bne.n	8001276 <change_mode+0x3e>
			if (not_save_flag_yellow == 1){
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <change_mode+0x84>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d103      	bne.n	8001276 <change_mode+0x3e>
				time_for_yellow = save_value_yellow;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <change_mode+0x88>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <change_mode+0x8c>)
 8001274:	6013      	str	r3, [r2, #0]
			}
		}
		if(current_mode == 4){
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <change_mode+0x74>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b04      	cmp	r3, #4
 800127c:	d107      	bne.n	800128e <change_mode+0x56>
			if (not_save_flag_green == 1){
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <change_mode+0x90>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d103      	bne.n	800128e <change_mode+0x56>
				time_for_green = save_value_green;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <change_mode+0x94>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <change_mode+0x98>)
 800128c:	6013      	str	r3, [r2, #0]
			}
		}
		current_mode++;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <change_mode+0x74>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	4a05      	ldr	r2, [pc, #20]	; (80012ac <change_mode+0x74>)
 8001296:	6013      	str	r3, [r2, #0]
		if (current_mode > 4){
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <change_mode+0x74>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b04      	cmp	r3, #4
 800129e:	dd02      	ble.n	80012a6 <change_mode+0x6e>
			current_mode = 1;
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <change_mode+0x74>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
		}
	}
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000048 	.word	0x20000048
 80012b0:	200000b0 	.word	0x200000b0
 80012b4:	2000004c 	.word	0x2000004c
 80012b8:	2000003c 	.word	0x2000003c
 80012bc:	200000b4 	.word	0x200000b4
 80012c0:	20000050 	.word	0x20000050
 80012c4:	20000040 	.word	0x20000040
 80012c8:	200000b8 	.word	0x200000b8
 80012cc:	20000054 	.word	0x20000054
 80012d0:	20000044 	.word	0x20000044

080012d4 <mode_1>:

void mode_1(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	if (current_mode == 1){
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <mode_1+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <mode_1+0x10>
		fsm_automatic_run();
 80012e0:	f7ff fdca 	bl	8000e78 <fsm_automatic_run>
	}
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000048 	.word	0x20000048

080012ec <mode_2>:

void mode_2(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	if (current_mode == 2){
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <mode_2+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d101      	bne.n	80012fc <mode_2+0x10>
		modifyRedLED();
 80012f8:	f7ff ff38 	bl	800116c <modifyRedLED>
	}
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000048 	.word	0x20000048

08001304 <mode_3>:

void mode_3(void){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	if (current_mode == 3){
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <mode_3+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d101      	bne.n	8001314 <mode_3+0x10>
		modifyYellowLED();
 8001310:	f7ff ff4e 	bl	80011b0 <modifyYellowLED>
	}
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000048 	.word	0x20000048

0800131c <mode_4>:

void mode_4(void){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	if (current_mode == 4){
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <mode_4+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b04      	cmp	r3, #4
 8001326:	d101      	bne.n	800132c <mode_4+0x10>
		modifyGreenLED();
 8001328:	f7ff ff64 	bl	80011f4 <modifyGreenLED>
	}
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000048 	.word	0x20000048

08001334 <change_clock_value>:

void change_clock_value(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	switch(current_mode){
 8001338:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <change_clock_value+0x144>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b04      	cmp	r3, #4
 800133e:	d063      	beq.n	8001408 <change_clock_value+0xd4>
 8001340:	2b04      	cmp	r3, #4
 8001342:	f300 8096 	bgt.w	8001472 <change_clock_value+0x13e>
 8001346:	2b02      	cmp	r3, #2
 8001348:	d002      	beq.n	8001350 <change_clock_value+0x1c>
 800134a:	2b03      	cmp	r3, #3
 800134c:	d02c      	beq.n	80013a8 <change_clock_value+0x74>
			save_value_green = time_for_green;
			time_for_red = time_for_green + time_for_yellow;
		}
		break;
	}
}
 800134e:	e090      	b.n	8001472 <change_clock_value+0x13e>
		if (isButton2Pressed()){
 8001350:	f7fe ff32 	bl	80001b8 <isButton2Pressed>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d012      	beq.n	8001380 <change_clock_value+0x4c>
			if (not_save_flag_red == 0){
 800135a:	4b48      	ldr	r3, [pc, #288]	; (800147c <change_clock_value+0x148>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <change_clock_value+0x34>
				not_save_flag_red = 1;
 8001362:	4b46      	ldr	r3, [pc, #280]	; (800147c <change_clock_value+0x148>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
			time_for_red++;
 8001368:	4b45      	ldr	r3, [pc, #276]	; (8001480 <change_clock_value+0x14c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a44      	ldr	r2, [pc, #272]	; (8001480 <change_clock_value+0x14c>)
 8001370:	6013      	str	r3, [r2, #0]
			if (time_for_red > 99){
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <change_clock_value+0x14c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b63      	cmp	r3, #99	; 0x63
 8001378:	dd02      	ble.n	8001380 <change_clock_value+0x4c>
				time_for_red = 1;
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <change_clock_value+0x14c>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
		if (isButton3Pressed()){
 8001380:	f7fe ff2c 	bl	80001dc <isButton3Pressed>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d06e      	beq.n	8001468 <change_clock_value+0x134>
			not_save_flag_red = 0;
 800138a:	4b3c      	ldr	r3, [pc, #240]	; (800147c <change_clock_value+0x148>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
			save_value_red = time_for_red;
 8001390:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <change_clock_value+0x14c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a3b      	ldr	r2, [pc, #236]	; (8001484 <change_clock_value+0x150>)
 8001396:	6013      	str	r3, [r2, #0]
			time_for_green = time_for_red - time_for_yellow;
 8001398:	4b39      	ldr	r3, [pc, #228]	; (8001480 <change_clock_value+0x14c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <change_clock_value+0x154>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a3a      	ldr	r2, [pc, #232]	; (800148c <change_clock_value+0x158>)
 80013a4:	6013      	str	r3, [r2, #0]
		break;
 80013a6:	e05f      	b.n	8001468 <change_clock_value+0x134>
		if (isButton2Pressed()){
 80013a8:	f7fe ff06 	bl	80001b8 <isButton2Pressed>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d016      	beq.n	80013e0 <change_clock_value+0xac>
			if (not_save_flag_yellow == 0){
 80013b2:	4b37      	ldr	r3, [pc, #220]	; (8001490 <change_clock_value+0x15c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d106      	bne.n	80013c8 <change_clock_value+0x94>
				not_save_flag_yellow = 1;
 80013ba:	4b35      	ldr	r3, [pc, #212]	; (8001490 <change_clock_value+0x15c>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
				save_value_yellow = time_for_yellow;
 80013c0:	4b31      	ldr	r3, [pc, #196]	; (8001488 <change_clock_value+0x154>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a33      	ldr	r2, [pc, #204]	; (8001494 <change_clock_value+0x160>)
 80013c6:	6013      	str	r3, [r2, #0]
			time_for_yellow++;
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <change_clock_value+0x154>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <change_clock_value+0x154>)
 80013d0:	6013      	str	r3, [r2, #0]
			if (time_for_yellow > 99){
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <change_clock_value+0x154>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b63      	cmp	r3, #99	; 0x63
 80013d8:	dd02      	ble.n	80013e0 <change_clock_value+0xac>
				time_for_yellow = 1;
 80013da:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <change_clock_value+0x154>)
 80013dc:	2201      	movs	r2, #1
 80013de:	601a      	str	r2, [r3, #0]
		if (isButton3Pressed()){
 80013e0:	f7fe fefc 	bl	80001dc <isButton3Pressed>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d040      	beq.n	800146c <change_clock_value+0x138>
			not_save_flag_yellow = 0;
 80013ea:	4b29      	ldr	r3, [pc, #164]	; (8001490 <change_clock_value+0x15c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
			save_value_yellow = time_for_yellow;
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <change_clock_value+0x154>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <change_clock_value+0x160>)
 80013f6:	6013      	str	r3, [r2, #0]
			time_for_red = time_for_green + time_for_yellow;
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <change_clock_value+0x158>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <change_clock_value+0x154>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4413      	add	r3, r2
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <change_clock_value+0x14c>)
 8001404:	6013      	str	r3, [r2, #0]
		break;
 8001406:	e031      	b.n	800146c <change_clock_value+0x138>
		if (isButton2Pressed()){
 8001408:	f7fe fed6 	bl	80001b8 <isButton2Pressed>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d016      	beq.n	8001440 <change_clock_value+0x10c>
			if (not_save_flag_green == 0){
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <change_clock_value+0x164>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <change_clock_value+0xf4>
				not_save_flag_green = 1;
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <change_clock_value+0x164>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
				save_value_green = time_for_green;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <change_clock_value+0x158>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <change_clock_value+0x168>)
 8001426:	6013      	str	r3, [r2, #0]
			time_for_green++;
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <change_clock_value+0x158>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a17      	ldr	r2, [pc, #92]	; (800148c <change_clock_value+0x158>)
 8001430:	6013      	str	r3, [r2, #0]
			if (time_for_green > 99){
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <change_clock_value+0x158>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b63      	cmp	r3, #99	; 0x63
 8001438:	dd02      	ble.n	8001440 <change_clock_value+0x10c>
				time_for_green = 1;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <change_clock_value+0x158>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
		if (isButton3Pressed()){
 8001440:	f7fe fecc 	bl	80001dc <isButton3Pressed>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d012      	beq.n	8001470 <change_clock_value+0x13c>
			not_save_flag_green = 0;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <change_clock_value+0x164>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
			save_value_green = time_for_green;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <change_clock_value+0x158>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a11      	ldr	r2, [pc, #68]	; (800149c <change_clock_value+0x168>)
 8001456:	6013      	str	r3, [r2, #0]
			time_for_red = time_for_green + time_for_yellow;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <change_clock_value+0x158>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <change_clock_value+0x154>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4413      	add	r3, r2
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <change_clock_value+0x14c>)
 8001464:	6013      	str	r3, [r2, #0]
		break;
 8001466:	e003      	b.n	8001470 <change_clock_value+0x13c>
		break;
 8001468:	bf00      	nop
 800146a:	e002      	b.n	8001472 <change_clock_value+0x13e>
		break;
 800146c:	bf00      	nop
 800146e:	e000      	b.n	8001472 <change_clock_value+0x13e>
		break;
 8001470:	bf00      	nop
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000048 	.word	0x20000048
 800147c:	200000b0 	.word	0x200000b0
 8001480:	2000003c 	.word	0x2000003c
 8001484:	2000004c 	.word	0x2000004c
 8001488:	20000040 	.word	0x20000040
 800148c:	20000044 	.word	0x20000044
 8001490:	200000b4 	.word	0x200000b4
 8001494:	20000050 	.word	0x20000050
 8001498:	200000b8 	.word	0x200000b8
 800149c:	20000054 	.word	0x20000054

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a4:	f000 fbac 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a8:	f000 f884 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ac:	f000 f90a 	bl	80016c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014b0:	f000 f8bc 	bl	800162c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80014b4:	4832      	ldr	r0, [pc, #200]	; (8001580 <main+0xe0>)
 80014b6:	f001 fb01 	bl	8002abc <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c0:	4830      	ldr	r0, [pc, #192]	; (8001584 <main+0xe4>)
 80014c2:	f000 fe9e 	bl	8002202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RED_X_GPIO_Port, RED_X_Pin, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2102      	movs	r1, #2
 80014ca:	482f      	ldr	r0, [pc, #188]	; (8001588 <main+0xe8>)
 80014cc:	f000 fe99 	bl	8002202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YELLOW_X_GPIO_Port, YELLOW_X_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2104      	movs	r1, #4
 80014d4:	482c      	ldr	r0, [pc, #176]	; (8001588 <main+0xe8>)
 80014d6:	f000 fe94 	bl	8002202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN_X_GPIO_Port, GREEN_X_Pin, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2108      	movs	r1, #8
 80014de:	482a      	ldr	r0, [pc, #168]	; (8001588 <main+0xe8>)
 80014e0:	f000 fe8f 	bl	8002202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RED_Y_GPIO_Port, RED_Y_Pin, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2110      	movs	r1, #16
 80014e8:	4827      	ldr	r0, [pc, #156]	; (8001588 <main+0xe8>)
 80014ea:	f000 fe8a 	bl	8002202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YELLOW_Y_GPIO_Port, YELLOW_Y_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2120      	movs	r1, #32
 80014f2:	4825      	ldr	r0, [pc, #148]	; (8001588 <main+0xe8>)
 80014f4:	f000 fe85 	bl	8002202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN_Y_GPIO_Port, GREEN_Y_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	4822      	ldr	r0, [pc, #136]	; (8001588 <main+0xe8>)
 80014fe:	f000 fe80 	bl	8002202 <HAL_GPIO_WritePin>
  init7SEG();
 8001502:	f7fe ff67 	bl	80003d4 <init7SEG>
  current_mode = 1;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <main+0xec>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
  status = INIT;
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <main+0xf0>)
 800150e:	220d      	movs	r2, #13
 8001510:	601a      	str	r2, [r3, #0]

  //One-shot Tasks
//  SCH_Add_Task(brightBlue, 1000, 0);

  //Periodic Tasks
  SCH_Add_Task(mode_1, 1000, 10);
 8001512:	220a      	movs	r2, #10
 8001514:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001518:	481e      	ldr	r0, [pc, #120]	; (8001594 <main+0xf4>)
 800151a:	f000 f951 	bl	80017c0 <SCH_Add_Task>
  SCH_Add_Task(mode_2, 1000, 500);
 800151e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001522:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001526:	481c      	ldr	r0, [pc, #112]	; (8001598 <main+0xf8>)
 8001528:	f000 f94a 	bl	80017c0 <SCH_Add_Task>
  SCH_Add_Task(mode_3, 1000, 500);
 800152c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001530:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001534:	4819      	ldr	r0, [pc, #100]	; (800159c <main+0xfc>)
 8001536:	f000 f943 	bl	80017c0 <SCH_Add_Task>
  SCH_Add_Task(mode_4, 1000, 500);
 800153a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800153e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <main+0x100>)
 8001544:	f000 f93c 	bl	80017c0 <SCH_Add_Task>
  SCH_Add_Task(countdown, 1000, 1000);
 8001548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800154c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001550:	4814      	ldr	r0, [pc, #80]	; (80015a4 <main+0x104>)
 8001552:	f000 f935 	bl	80017c0 <SCH_Add_Task>
  SCH_Add_Task(updateBufferOption, 1000, 250);
 8001556:	22fa      	movs	r2, #250	; 0xfa
 8001558:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <main+0x108>)
 800155e:	f000 f92f 	bl	80017c0 <SCH_Add_Task>
  SCH_Add_Task(change_mode, 1000, 100);
 8001562:	2264      	movs	r2, #100	; 0x64
 8001564:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001568:	4810      	ldr	r0, [pc, #64]	; (80015ac <main+0x10c>)
 800156a:	f000 f929 	bl	80017c0 <SCH_Add_Task>
  SCH_Add_Task(change_clock_value, 1000, 10);
 800156e:	220a      	movs	r2, #10
 8001570:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001574:	480e      	ldr	r0, [pc, #56]	; (80015b0 <main+0x110>)
 8001576:	f000 f923 	bl	80017c0 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800157a:	f000 f9eb 	bl	8001954 <SCH_Dispatch_Tasks>
 800157e:	e7fc      	b.n	800157a <main+0xda>
 8001580:	200003e4 	.word	0x200003e4
 8001584:	40010c00 	.word	0x40010c00
 8001588:	40010800 	.word	0x40010800
 800158c:	20000048 	.word	0x20000048
 8001590:	200000bc 	.word	0x200000bc
 8001594:	080012d5 	.word	0x080012d5
 8001598:	080012ed 	.word	0x080012ed
 800159c:	08001305 	.word	0x08001305
 80015a0:	0800131d 	.word	0x0800131d
 80015a4:	08000e51 	.word	0x08000e51
 80015a8:	08000bed 	.word	0x08000bed
 80015ac:	08001239 	.word	0x08001239
 80015b0:	08001335 	.word	0x08001335

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b090      	sub	sp, #64	; 0x40
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	2228      	movs	r2, #40	; 0x28
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fe2a 	bl	800321c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015da:	2301      	movs	r3, #1
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015de:	2310      	movs	r3, #16
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e6:	f107 0318 	add.w	r3, r7, #24
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fe3a 	bl	8002264 <HAL_RCC_OscConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015f6:	f000 f8de 	bl	80017b6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fa:	230f      	movs	r3, #15
 80015fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f8a6 	bl	8002764 <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800161e:	f000 f8ca 	bl	80017b6 <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3740      	adds	r7, #64	; 0x40
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_TIM2_Init+0x94>)
 800164a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001652:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_TIM2_Init+0x94>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001660:	2209      	movs	r2, #9
 8001662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_TIM2_Init+0x94>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001672:	f001 f9d3 	bl	8002a1c <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800167c:	f000 f89b 	bl	80017b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	4619      	mov	r1, r3
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <MX_TIM2_Init+0x94>)
 800168e:	f001 fb51 	bl	8002d34 <HAL_TIM_ConfigClockSource>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001698:	f000 f88d 	bl	80017b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_TIM2_Init+0x94>)
 80016aa:	f001 fd29 	bl	8003100 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016b4:	f000 f87f 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200003e4 	.word	0x200003e4

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a28      	ldr	r2, [pc, #160]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_GPIO_Init+0xbc>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_X_Pin|YELLOW_X_Pin|GREEN_X_Pin|RED_Y_Pin
 8001708:	2200      	movs	r2, #0
 800170a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800170e:	481d      	ldr	r0, [pc, #116]	; (8001784 <MX_GPIO_Init+0xc0>)
 8001710:	f000 fd77 	bl	8002202 <HAL_GPIO_WritePin>
                          |YELLOW_Y_Pin|GREEN_Y_Pin|SEG0_X_Pin|SEG1_X_Pin
                          |SEG2_X_Pin|SEG3_X_Pin|SEG4_X_Pin|SEG5_X_Pin
                          |SEG6_X_Pin|EN0_X_Pin|EN1_X_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Y_Pin|SEG1_Y_Pin|SEG2_Y_Pin|EN1_Y_Pin
 8001714:	2200      	movs	r2, #0
 8001716:	f241 11ff 	movw	r1, #4607	; 0x11ff
 800171a:	481b      	ldr	r0, [pc, #108]	; (8001788 <MX_GPIO_Init+0xc4>)
 800171c:	f000 fd71 	bl	8002202 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_X_Pin YELLOW_X_Pin GREEN_X_Pin RED_Y_Pin
                           YELLOW_Y_Pin GREEN_Y_Pin SEG0_X_Pin SEG1_X_Pin
                           SEG2_X_Pin SEG3_X_Pin SEG4_X_Pin SEG5_X_Pin
                           SEG6_X_Pin EN0_X_Pin EN1_X_Pin */
  GPIO_InitStruct.Pin = RED_X_Pin|YELLOW_X_Pin|GREEN_X_Pin|RED_Y_Pin
 8001720:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001724:	60bb      	str	r3, [r7, #8]
                          |YELLOW_Y_Pin|GREEN_Y_Pin|SEG0_X_Pin|SEG1_X_Pin
                          |SEG2_X_Pin|SEG3_X_Pin|SEG4_X_Pin|SEG5_X_Pin
                          |SEG6_X_Pin|EN0_X_Pin|EN1_X_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2302      	movs	r3, #2
 8001730:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	4619      	mov	r1, r3
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <MX_GPIO_Init+0xc0>)
 800173a:	f000 fbd1 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Y_Pin SEG1_Y_Pin SEG2_Y_Pin EN1_Y_Pin
                           SEG3_Y_Pin SEG4_Y_Pin SEG5_Y_Pin SEG6_Y_Pin
                           EN0_Y_Pin BLUE_Pin */
  GPIO_InitStruct.Pin = SEG0_Y_Pin|SEG1_Y_Pin|SEG2_Y_Pin|EN1_Y_Pin
 800173e:	f241 13ff 	movw	r3, #4607	; 0x11ff
 8001742:	60bb      	str	r3, [r7, #8]
                          |SEG3_Y_Pin|SEG4_Y_Pin|SEG5_Y_Pin|SEG6_Y_Pin
                          |EN0_Y_Pin|BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2302      	movs	r3, #2
 800174e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_GPIO_Init+0xc4>)
 8001758:	f000 fbc2 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_1_Pin;
 800175c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001766:	2301      	movs	r3, #1
 8001768:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_GPIO_Init+0xc4>)
 8001772:	f000 fbb5 	bl	8001ee0 <HAL_GPIO_Init>

}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	40010800 	.word	0x40010800
 8001788:	40010c00 	.word	0x40010c00

0800178c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800179c:	d107      	bne.n	80017ae <HAL_TIM_PeriodElapsedCallback+0x22>
		getKeyInput_1();
 800179e:	f7fe fd2f 	bl	8000200 <getKeyInput_1>
		getKeyInput_2();
 80017a2:	f7fe fd7b 	bl	800029c <getKeyInput_2>
		getKeyInput_3();
 80017a6:	f7fe fdc7 	bl	8000338 <getKeyInput_3>
		SCH_Update();
 80017aa:	f000 f865 	bl	8001878 <SCH_Update>
	}
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ba:	b672      	cpsid	i
}
 80017bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017be:	e7fe      	b.n	80017be <Error_Handler+0x8>

080017c0 <SCH_Add_Task>:
	Error_code_G = 0;
	Timer_init();
	Watchdog_init();
}

unsigned char SCH_Add_Task(void(*pFunction)() , unsigned int DELAY,unsigned int PERIOD){
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 80017d0:	e002      	b.n	80017d8 <SCH_Add_Task+0x18>
		Index++;
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	3301      	adds	r3, #1
 80017d6:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 80017d8:	7dfa      	ldrb	r2, [r7, #23]
 80017da:	4924      	ldr	r1, [pc, #144]	; (800186c <SCH_Add_Task+0xac>)
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <SCH_Add_Task+0x32>
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b27      	cmp	r3, #39	; 0x27
 80017f0:	d9ef      	bls.n	80017d2 <SCH_Add_Task+0x12>
	}
	if(Index == SCH_MAX_TASKS){
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b28      	cmp	r3, #40	; 0x28
 80017f6:	d104      	bne.n	8001802 <SCH_Add_Task+0x42>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <SCH_Add_Task+0xb0>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
		return SCH_MAX_TASKS;
 80017fe:	2328      	movs	r3, #40	; 0x28
 8001800:	e02f      	b.n	8001862 <SCH_Add_Task+0xa2>
	}
	SCH_tasks_G[Index].pTask = pFunction;
 8001802:	7dfa      	ldrb	r2, [r7, #23]
 8001804:	4919      	ldr	r1, [pc, #100]	; (800186c <SCH_Add_Task+0xac>)
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY / 10;
 8001814:	7dfa      	ldrb	r2, [r7, #23]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4916      	ldr	r1, [pc, #88]	; (8001874 <SCH_Add_Task+0xb4>)
 800181a:	fba1 1303 	umull	r1, r3, r1, r3
 800181e:	08d9      	lsrs	r1, r3, #3
 8001820:	4812      	ldr	r0, [pc, #72]	; (800186c <SCH_Add_Task+0xac>)
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4403      	add	r3, r0
 800182c:	3304      	adds	r3, #4
 800182e:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD / 10;
 8001830:	7dfa      	ldrb	r2, [r7, #23]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	490f      	ldr	r1, [pc, #60]	; (8001874 <SCH_Add_Task+0xb4>)
 8001836:	fba1 1303 	umull	r1, r3, r1, r3
 800183a:	08d9      	lsrs	r1, r3, #3
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <SCH_Add_Task+0xac>)
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4403      	add	r3, r0
 8001848:	3308      	adds	r3, #8
 800184a:	6019      	str	r1, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 800184c:	7dfa      	ldrb	r2, [r7, #23]
 800184e:	4907      	ldr	r1, [pc, #28]	; (800186c <SCH_Add_Task+0xac>)
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	330c      	adds	r3, #12
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
	return Index;
 8001860:	7dfb      	ldrb	r3, [r7, #23]
}
 8001862:	4618      	mov	r0, r3
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	200000c4 	.word	0x200000c4
 8001870:	200000c0 	.word	0x200000c0
 8001874:	cccccccd 	.word	0xcccccccd

08001878 <SCH_Update>:

void SCH_Update(void){
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
	unsigned char Index;
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 800187e:	2300      	movs	r3, #0
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	e05c      	b.n	800193e <SCH_Update+0xc6>
		if(SCH_tasks_G[Index].pTask){
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	4932      	ldr	r1, [pc, #200]	; (8001950 <SCH_Update+0xd8>)
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d04f      	beq.n	8001938 <SCH_Update+0xc0>
			if(SCH_tasks_G[Index].Delay == 0){
 8001898:	79fa      	ldrb	r2, [r7, #7]
 800189a:	492d      	ldr	r1, [pc, #180]	; (8001950 <SCH_Update+0xd8>)
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	3304      	adds	r3, #4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d132      	bne.n	8001914 <SCH_Update+0x9c>
				SCH_tasks_G[Index].RunMe += 1;
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	4927      	ldr	r1, [pc, #156]	; (8001950 <SCH_Update+0xd8>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	330c      	adds	r3, #12
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	79fa      	ldrb	r2, [r7, #7]
 80018c2:	3301      	adds	r3, #1
 80018c4:	b2d8      	uxtb	r0, r3
 80018c6:	4922      	ldr	r1, [pc, #136]	; (8001950 <SCH_Update+0xd8>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	330c      	adds	r3, #12
 80018d4:	4602      	mov	r2, r0
 80018d6:	701a      	strb	r2, [r3, #0]
				if(SCH_tasks_G[Index].Period){
 80018d8:	79fa      	ldrb	r2, [r7, #7]
 80018da:	491d      	ldr	r1, [pc, #116]	; (8001950 <SCH_Update+0xd8>)
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3308      	adds	r3, #8
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d024      	beq.n	8001938 <SCH_Update+0xc0>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80018ee:	79f9      	ldrb	r1, [r7, #7]
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	4817      	ldr	r0, [pc, #92]	; (8001950 <SCH_Update+0xd8>)
 80018f4:	460b      	mov	r3, r1
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4403      	add	r3, r0
 80018fe:	3308      	adds	r3, #8
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	4813      	ldr	r0, [pc, #76]	; (8001950 <SCH_Update+0xd8>)
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4403      	add	r3, r0
 800190e:	3304      	adds	r3, #4
 8001910:	6019      	str	r1, [r3, #0]
 8001912:	e011      	b.n	8001938 <SCH_Update+0xc0>
				}
			}
			else{
				SCH_tasks_G[Index].Delay--;
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	490e      	ldr	r1, [pc, #56]	; (8001950 <SCH_Update+0xd8>)
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	3304      	adds	r3, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	1e59      	subs	r1, r3, #1
 8001928:	4809      	ldr	r0, [pc, #36]	; (8001950 <SCH_Update+0xd8>)
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4403      	add	r3, r0
 8001934:	3304      	adds	r3, #4
 8001936:	6019      	str	r1, [r3, #0]
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	3301      	adds	r3, #1
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b27      	cmp	r3, #39	; 0x27
 8001942:	d99f      	bls.n	8001884 <SCH_Update+0xc>
			}
		}
	}
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	200000c4 	.word	0x200000c4

08001954 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
	unsigned char Index ;
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 800195a:	2300      	movs	r3, #0
 800195c:	71fb      	strb	r3, [r7, #7]
 800195e:	e039      	b.n	80019d4 <SCH_Dispatch_Tasks+0x80>
		if(SCH_tasks_G [Index].RunMe > 0){
 8001960:	79fa      	ldrb	r2, [r7, #7]
 8001962:	4922      	ldr	r1, [pc, #136]	; (80019ec <SCH_Dispatch_Tasks+0x98>)
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	330c      	adds	r3, #12
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d02b      	beq.n	80019ce <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)();
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	491c      	ldr	r1, [pc, #112]	; (80019ec <SCH_Dispatch_Tasks+0x98>)
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--;
 8001988:	79fa      	ldrb	r2, [r7, #7]
 800198a:	4918      	ldr	r1, [pc, #96]	; (80019ec <SCH_Dispatch_Tasks+0x98>)
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	330c      	adds	r3, #12
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	3b01      	subs	r3, #1
 800199c:	b2d8      	uxtb	r0, r3
 800199e:	4913      	ldr	r1, [pc, #76]	; (80019ec <SCH_Dispatch_Tasks+0x98>)
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	330c      	adds	r3, #12
 80019ac:	4602      	mov	r2, r0
 80019ae:	701a      	strb	r2, [r3, #0]
			if(SCH_tasks_G[Index].Period == 0){
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	490e      	ldr	r1, [pc, #56]	; (80019ec <SCH_Dispatch_Tasks+0x98>)
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3308      	adds	r3, #8
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(Index);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f811 	bl	80019f0 <SCH_Delete_Task>
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	3301      	adds	r3, #1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b27      	cmp	r3, #39	; 0x27
 80019d8:	d9c2      	bls.n	8001960 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
	SCH_Report_Status();
 80019da:	f000 f857 	bl	8001a8c <SCH_Report_Status>
	SCH_Go_To_Sleep();
 80019de:	f000 f84f 	bl	8001a80 <SCH_Go_To_Sleep>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200000c4 	.word	0x200000c4

080019f0 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(const uint32_t TASK_INDEX){
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	unsigned char Return_code;
	if(SCH_tasks_G[TASK_INDEX].pTask == 0){
 80019f8:	491f      	ldr	r1, [pc, #124]	; (8001a78 <SCH_Delete_Task+0x88>)
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <SCH_Delete_Task+0x28>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <SCH_Delete_Task+0x8c>)
 8001a0e:	2208      	movs	r2, #8
 8001a10:	701a      	strb	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 8001a12:	2309      	movs	r3, #9
 8001a14:	73fb      	strb	r3, [r7, #15]
 8001a16:	e001      	b.n	8001a1c <SCH_Delete_Task+0x2c>
	}
	else{
		Return_code = RETURN_NORMAL;
 8001a18:	230a      	movs	r3, #10
 8001a1a:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8001a1c:	4916      	ldr	r1, [pc, #88]	; (8001a78 <SCH_Delete_Task+0x88>)
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 8001a2e:	4912      	ldr	r1, [pc, #72]	; (8001a78 <SCH_Delete_Task+0x88>)
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 8001a42:	490d      	ldr	r1, [pc, #52]	; (8001a78 <SCH_Delete_Task+0x88>)
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	3308      	adds	r3, #8
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <SCH_Delete_Task+0x88>)
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	330c      	adds	r3, #12
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
	return Return_code;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200000c4 	.word	0x200000c4
 8001a7c:	200000c0 	.word	0x200000c0

08001a80 <SCH_Go_To_Sleep>:

void Timer_init(void){
	//TODO
}

void SCH_Go_To_Sleep(void){
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
	//TODO
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <SCH_Report_Status>:

void SCH_Report_Status(void){
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
				Error_code_G = 0;
			}
		}
	}
#endif
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_MspInit+0x5c>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_MspInit+0x5c>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_MspInit+0x5c>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_MspInit+0x60>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_MspInit+0x60>)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000

08001afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0c:	d113      	bne.n	8001b36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_TIM_Base_MspInit+0x44>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_TIM_Base_MspInit+0x44>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_TIM_Base_MspInit+0x44>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	201c      	movs	r0, #28
 8001b2c:	f000 f9a1 	bl	8001e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b30:	201c      	movs	r0, #28
 8001b32:	f000 f9ba 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <NMI_Handler+0x4>

08001b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <HardFault_Handler+0x4>

08001b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <MemManage_Handler+0x4>

08001b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <BusFault_Handler+0x4>

08001b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <UsageFault_Handler+0x4>

08001b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8a:	f000 f87f 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM2_IRQHandler+0x10>)
 8001b9a:	f000 ffdb 	bl	8002b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200003e4 	.word	0x200003e4

08001ba8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb4:	f7ff fff8 	bl	8001ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480b      	ldr	r0, [pc, #44]	; (8001be8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bba:	490c      	ldr	r1, [pc, #48]	; (8001bec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bd0:	4c09      	ldr	r4, [pc, #36]	; (8001bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bde:	f001 faf9 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001be2:	f7ff fc5d 	bl	80014a0 <main>
  bx lr
 8001be6:	4770      	bx	lr
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001bf0:	08003270 	.word	0x08003270
  ldr r2, =_sbss
 8001bf4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001bf8:	20000430 	.word	0x20000430

08001bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC1_2_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_Init+0x28>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_Init+0x28>)
 8001c0a:	f043 0310 	orr.w	r3, r3, #16
 8001c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f923 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	200f      	movs	r0, #15
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff ff3c 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40022000 	.word	0x40022000

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f93b 	bl	8001ec6 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 f903 	bl	8001e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000058 	.word	0x20000058
 8001c84:	20000060 	.word	0x20000060
 8001c88:	2000005c 	.word	0x2000005c

08001c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_IncTick+0x1c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_IncTick+0x20>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a03      	ldr	r2, [pc, #12]	; (8001cac <HAL_IncTick+0x20>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000060 	.word	0x20000060
 8001cac:	2000042c 	.word	0x2000042c

08001cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_GetTick+0x10>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	2000042c 	.word	0x2000042c

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db0b      	blt.n	8001d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4906      	ldr	r1, [pc, #24]	; (8001d5c <__NVIC_EnableIRQ+0x34>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff90 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff2d 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff42 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff90 	bl	8001db4 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5f 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff35 	bl	8001d28 <__NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa2 	bl	8001e18 <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b08b      	sub	sp, #44	; 0x2c
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef2:	e148      	b.n	8002186 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 8137 	bne.w	8002180 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4aa3      	ldr	r2, [pc, #652]	; (80021a4 <HAL_GPIO_Init+0x2c4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d05e      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
 8001f1c:	4aa1      	ldr	r2, [pc, #644]	; (80021a4 <HAL_GPIO_Init+0x2c4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d875      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f22:	4aa1      	ldr	r2, [pc, #644]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d058      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
 8001f28:	4a9f      	ldr	r2, [pc, #636]	; (80021a8 <HAL_GPIO_Init+0x2c8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d86f      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f2e:	4a9f      	ldr	r2, [pc, #636]	; (80021ac <HAL_GPIO_Init+0x2cc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d052      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
 8001f34:	4a9d      	ldr	r2, [pc, #628]	; (80021ac <HAL_GPIO_Init+0x2cc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d869      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f3a:	4a9d      	ldr	r2, [pc, #628]	; (80021b0 <HAL_GPIO_Init+0x2d0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d04c      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
 8001f40:	4a9b      	ldr	r2, [pc, #620]	; (80021b0 <HAL_GPIO_Init+0x2d0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d863      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f46:	4a9b      	ldr	r2, [pc, #620]	; (80021b4 <HAL_GPIO_Init+0x2d4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d046      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
 8001f4c:	4a99      	ldr	r2, [pc, #612]	; (80021b4 <HAL_GPIO_Init+0x2d4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d85d      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f52:	2b12      	cmp	r3, #18
 8001f54:	d82a      	bhi.n	8001fac <HAL_GPIO_Init+0xcc>
 8001f56:	2b12      	cmp	r3, #18
 8001f58:	d859      	bhi.n	800200e <HAL_GPIO_Init+0x12e>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <HAL_GPIO_Init+0x80>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001fdb 	.word	0x08001fdb
 8001f64:	08001fb5 	.word	0x08001fb5
 8001f68:	08001fc7 	.word	0x08001fc7
 8001f6c:	08002009 	.word	0x08002009
 8001f70:	0800200f 	.word	0x0800200f
 8001f74:	0800200f 	.word	0x0800200f
 8001f78:	0800200f 	.word	0x0800200f
 8001f7c:	0800200f 	.word	0x0800200f
 8001f80:	0800200f 	.word	0x0800200f
 8001f84:	0800200f 	.word	0x0800200f
 8001f88:	0800200f 	.word	0x0800200f
 8001f8c:	0800200f 	.word	0x0800200f
 8001f90:	0800200f 	.word	0x0800200f
 8001f94:	0800200f 	.word	0x0800200f
 8001f98:	0800200f 	.word	0x0800200f
 8001f9c:	0800200f 	.word	0x0800200f
 8001fa0:	0800200f 	.word	0x0800200f
 8001fa4:	08001fbd 	.word	0x08001fbd
 8001fa8:	08001fd1 	.word	0x08001fd1
 8001fac:	4a82      	ldr	r2, [pc, #520]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fb2:	e02c      	b.n	800200e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e029      	b.n	8002010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e024      	b.n	8002010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	3308      	adds	r3, #8
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e01f      	b.n	8002010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	330c      	adds	r3, #12
 8001fd6:	623b      	str	r3, [r7, #32]
          break;
 8001fd8:	e01a      	b.n	8002010 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	623b      	str	r3, [r7, #32]
          break;
 8001fe6:	e013      	b.n	8002010 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	611a      	str	r2, [r3, #16]
          break;
 8001ffa:	e009      	b.n	8002010 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	615a      	str	r2, [r3, #20]
          break;
 8002006:	e003      	b.n	8002010 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
          break;
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x130>
          break;
 800200e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2bff      	cmp	r3, #255	; 0xff
 8002014:	d801      	bhi.n	800201a <HAL_GPIO_Init+0x13a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	e001      	b.n	800201e <HAL_GPIO_Init+0x13e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2bff      	cmp	r3, #255	; 0xff
 8002024:	d802      	bhi.n	800202c <HAL_GPIO_Init+0x14c>
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	e002      	b.n	8002032 <HAL_GPIO_Init+0x152>
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	3b08      	subs	r3, #8
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	210f      	movs	r1, #15
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	401a      	ands	r2, r3
 8002044:	6a39      	ldr	r1, [r7, #32]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	431a      	orrs	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8090 	beq.w	8002180 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002060:	4b56      	ldr	r3, [pc, #344]	; (80021bc <HAL_GPIO_Init+0x2dc>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a55      	ldr	r2, [pc, #340]	; (80021bc <HAL_GPIO_Init+0x2dc>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_GPIO_Init+0x2dc>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002078:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <HAL_GPIO_Init+0x2e0>)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002084:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a49      	ldr	r2, [pc, #292]	; (80021c4 <HAL_GPIO_Init+0x2e4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00d      	beq.n	80020c0 <HAL_GPIO_Init+0x1e0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a48      	ldr	r2, [pc, #288]	; (80021c8 <HAL_GPIO_Init+0x2e8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d007      	beq.n	80020bc <HAL_GPIO_Init+0x1dc>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a47      	ldr	r2, [pc, #284]	; (80021cc <HAL_GPIO_Init+0x2ec>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_GPIO_Init+0x1d8>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e004      	b.n	80020c2 <HAL_GPIO_Init+0x1e2>
 80020b8:	2303      	movs	r3, #3
 80020ba:	e002      	b.n	80020c2 <HAL_GPIO_Init+0x1e2>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_GPIO_Init+0x1e2>
 80020c0:	2300      	movs	r3, #0
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	f002 0203 	and.w	r2, r2, #3
 80020c8:	0092      	lsls	r2, r2, #2
 80020ca:	4093      	lsls	r3, r2
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020d2:	493b      	ldr	r1, [pc, #236]	; (80021c0 <HAL_GPIO_Init+0x2e0>)
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4937      	ldr	r1, [pc, #220]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	43db      	mvns	r3, r3
 8002102:	4933      	ldr	r1, [pc, #204]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002104:	4013      	ands	r3, r2
 8002106:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002114:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	492d      	ldr	r1, [pc, #180]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	60cb      	str	r3, [r1, #12]
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	43db      	mvns	r3, r3
 800212a:	4929      	ldr	r1, [pc, #164]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 800212c:	4013      	ands	r3, r2
 800212e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4923      	ldr	r1, [pc, #140]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	43db      	mvns	r3, r3
 8002152:	491f      	ldr	r1, [pc, #124]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002154:	4013      	ands	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4919      	ldr	r1, [pc, #100]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	4915      	ldr	r1, [pc, #84]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 800217c:	4013      	ands	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	3301      	adds	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	f47f aeaf 	bne.w	8001ef4 <HAL_GPIO_Init+0x14>
  }
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	372c      	adds	r7, #44	; 0x2c
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	10320000 	.word	0x10320000
 80021a8:	10310000 	.word	0x10310000
 80021ac:	10220000 	.word	0x10220000
 80021b0:	10210000 	.word	0x10210000
 80021b4:	10120000 	.word	0x10120000
 80021b8:	10110000 	.word	0x10110000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	40011000 	.word	0x40011000
 80021d0:	40010400 	.word	0x40010400

080021d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	807b      	strh	r3, [r7, #2]
 800220e:	4613      	mov	r3, r2
 8002210:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002212:	787b      	ldrb	r3, [r7, #1]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002218:	887a      	ldrh	r2, [r7, #2]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800221e:	e003      	b.n	8002228 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	041a      	lsls	r2, r3, #16
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	611a      	str	r2, [r3, #16]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002244:	887a      	ldrh	r2, [r7, #2]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4013      	ands	r3, r2
 800224a:	041a      	lsls	r2, r3, #16
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43d9      	mvns	r1, r3
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	400b      	ands	r3, r1
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	611a      	str	r2, [r3, #16]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e26c      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8087 	beq.w	8002392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002284:	4b92      	ldr	r3, [pc, #584]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b04      	cmp	r3, #4
 800228e:	d00c      	beq.n	80022aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002290:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d112      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
 800229c:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d10b      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022aa:	4b89      	ldr	r3, [pc, #548]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d06c      	beq.n	8002390 <HAL_RCC_OscConfig+0x12c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d168      	bne.n	8002390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e246      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x76>
 80022cc:	4b80      	ldr	r3, [pc, #512]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a7f      	ldr	r2, [pc, #508]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e02e      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x98>
 80022e2:	4b7b      	ldr	r3, [pc, #492]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7a      	ldr	r2, [pc, #488]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a77      	ldr	r2, [pc, #476]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0xbc>
 8002306:	4b72      	ldr	r3, [pc, #456]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a71      	ldr	r2, [pc, #452]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b6f      	ldr	r3, [pc, #444]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6e      	ldr	r2, [pc, #440]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 8002320:	4b6b      	ldr	r3, [pc, #428]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6a      	ldr	r2, [pc, #424]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a67      	ldr	r2, [pc, #412]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7ff fcb6 	bl	8001cb0 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff fcb2 	bl	8001cb0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1fa      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b5d      	ldr	r3, [pc, #372]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xe4>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff fca2 	bl	8001cb0 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff fc9e 	bl	8001cb0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1e6      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x10c>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d063      	beq.n	8002466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800239e:	4b4c      	ldr	r3, [pc, #304]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023aa:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x18c>
 80023b6:	4b46      	ldr	r3, [pc, #280]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x176>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1ba      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4939      	ldr	r1, [pc, #228]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	e03a      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff fc57 	bl	8001cb0 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7ff fc53 	bl	8001cb0 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e19b      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4927      	ldr	r1, [pc, #156]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff fc36 	bl	8001cb0 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7ff fc32 	bl	8001cb0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e17a      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d03a      	beq.n	80024e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d019      	beq.n	80024ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 800247c:	2201      	movs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7ff fc16 	bl	8001cb0 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002488:	f7ff fc12 	bl	8001cb0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e15a      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f000 fa9a 	bl	80029e0 <RCC_Delay>
 80024ac:	e01c      	b.n	80024e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7ff fbfc 	bl	8001cb0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ba:	e00f      	b.n	80024dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024bc:	f7ff fbf8 	bl	8001cb0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d908      	bls.n	80024dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e140      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	42420000 	.word	0x42420000
 80024d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b9e      	ldr	r3, [pc, #632]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e9      	bne.n	80024bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a6 	beq.w	8002642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b97      	ldr	r3, [pc, #604]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10d      	bne.n	8002522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b94      	ldr	r3, [pc, #592]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a93      	ldr	r2, [pc, #588]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	4b91      	ldr	r3, [pc, #580]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b8e      	ldr	r3, [pc, #568]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d118      	bne.n	8002560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252e:	4b8b      	ldr	r3, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a8a      	ldr	r2, [pc, #552]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253a:	f7ff fbb9 	bl	8001cb0 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7ff fbb5 	bl	8001cb0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b64      	cmp	r3, #100	; 0x64
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0fd      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	4b81      	ldr	r3, [pc, #516]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x312>
 8002568:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a7a      	ldr	r2, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	e02d      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x334>
 800257e:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a75      	ldr	r2, [pc, #468]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	e01c      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d10c      	bne.n	80025ba <HAL_RCC_OscConfig+0x356>
 80025a0:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a6c      	ldr	r2, [pc, #432]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a69      	ldr	r2, [pc, #420]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	e00b      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 80025ba:	4b67      	ldr	r3, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a66      	ldr	r2, [pc, #408]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	4b64      	ldr	r3, [pc, #400]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a63      	ldr	r2, [pc, #396]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d015      	beq.n	8002606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7ff fb69 	bl	8001cb0 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7ff fb65 	bl	8001cb0 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0ab      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	4b57      	ldr	r3, [pc, #348]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ee      	beq.n	80025e2 <HAL_RCC_OscConfig+0x37e>
 8002604:	e014      	b.n	8002630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7ff fb53 	bl	8001cb0 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7ff fb4f 	bl	8001cb0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	; 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e095      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ee      	bne.n	800260e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a47      	ldr	r2, [pc, #284]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8081 	beq.w	800274e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800264c:	4b42      	ldr	r3, [pc, #264]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d061      	beq.n	800271c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d146      	bne.n	80026ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_OscConfig+0x4fc>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7ff fb23 	bl	8001cb0 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7ff fb1f 	bl	8001cb0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e067      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	4b35      	ldr	r3, [pc, #212]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d108      	bne.n	80026a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002696:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	492d      	ldr	r1, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a8:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a19      	ldr	r1, [r3, #32]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	430b      	orrs	r3, r1
 80026ba:	4927      	ldr	r1, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_RCC_OscConfig+0x4fc>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7ff faf3 	bl	8001cb0 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7ff faef 	bl	8001cb0 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e037      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x46a>
 80026ec:	e02f      	b.n	800274e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCC_OscConfig+0x4fc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff fadc 	bl	8001cb0 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7ff fad8 	bl	8001cb0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e020      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x498>
 800271a:	e018      	b.n	800274e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	429a      	cmp	r2, r3
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
 8002760:	42420060 	.word	0x42420060

08002764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0d0      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002778:	4b6a      	ldr	r3, [pc, #424]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d910      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 0207 	bic.w	r2, r3, #7
 800278e:	4965      	ldr	r1, [pc, #404]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b8      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a58      	ldr	r2, [pc, #352]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b50      	ldr	r3, [pc, #320]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494d      	ldr	r1, [pc, #308]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d040      	beq.n	8002884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d115      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07f      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e073      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e06b      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4936      	ldr	r1, [pc, #216]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002854:	f7ff fa2c 	bl	8001cb0 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7ff fa28 	bl	8001cb0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e053      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 020c 	and.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	429a      	cmp	r2, r3
 8002882:	d1eb      	bne.n	800285c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d210      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 0207 	bic.w	r2, r3, #7
 800289a:	4922      	ldr	r1, [pc, #136]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e032      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4916      	ldr	r1, [pc, #88]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490e      	ldr	r1, [pc, #56]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f821 	bl	8002938 <HAL_RCC_GetSysClockFreq>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	490a      	ldr	r1, [pc, #40]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	5ccb      	ldrb	r3, [r1, r3]
 8002906:	fa22 f303 	lsr.w	r3, r2, r3
 800290a:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x1cc>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_RCC_ClockConfig+0x1d0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f98a 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40022000 	.word	0x40022000
 8002928:	40021000 	.word	0x40021000
 800292c:	08003244 	.word	0x08003244
 8002930:	20000058 	.word	0x20000058
 8002934:	2000005c 	.word	0x2000005c

08002938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b04      	cmp	r3, #4
 8002960:	d002      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x30>
 8002962:	2b08      	cmp	r3, #8
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x36>
 8002966:	e027      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800296a:	613b      	str	r3, [r7, #16]
      break;
 800296c:	e027      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	0c9b      	lsrs	r3, r3, #18
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	4a17      	ldr	r2, [pc, #92]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002978:	5cd3      	ldrb	r3, [r2, r3]
 800297a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d010      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	0c5b      	lsrs	r3, r3, #17
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800299a:	fb02 f203 	mul.w	r2, r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	e004      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	613b      	str	r3, [r7, #16]
      break;
 80029b6:	e002      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ba:	613b      	str	r3, [r7, #16]
      break;
 80029bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029be:	693b      	ldr	r3, [r7, #16]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	007a1200 	.word	0x007a1200
 80029d4:	08003254 	.word	0x08003254
 80029d8:	08003264 	.word	0x08003264
 80029dc:	003d0900 	.word	0x003d0900

080029e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <RCC_Delay+0x34>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <RCC_Delay+0x38>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0a5b      	lsrs	r3, r3, #9
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029fc:	bf00      	nop
  }
  while (Delay --);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	60fa      	str	r2, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f9      	bne.n	80029fc <RCC_Delay+0x1c>
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000058 	.word	0x20000058
 8002a18:	10624dd3 	.word	0x10624dd3

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e041      	b.n	8002ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff f85a 	bl	8001afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 fa56 	bl	8002f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d001      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e035      	b.n	8002b40 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <HAL_TIM_Base_Start_IT+0x90>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d009      	beq.n	8002b0a <HAL_TIM_Base_Start_IT+0x4e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afe:	d004      	beq.n	8002b0a <HAL_TIM_Base_Start_IT+0x4e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_TIM_Base_Start_IT+0x94>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d111      	bne.n	8002b2e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b06      	cmp	r3, #6
 8002b1a:	d010      	beq.n	8002b3e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2c:	e007      	b.n	8002b3e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40000400 	.word	0x40000400

08002b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d020      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0202 	mvn.w	r2, #2
 8002b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f998 	bl	8002ed4 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f98b 	bl	8002ec2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f99a 	bl	8002ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d020      	beq.n	8002c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0204 	mvn.w	r2, #4
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f972 	bl	8002ed4 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f965 	bl	8002ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f974 	bl	8002ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d020      	beq.n	8002c50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01b      	beq.n	8002c50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0208 	mvn.w	r2, #8
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2204      	movs	r2, #4
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f94c 	bl	8002ed4 <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f93f 	bl	8002ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f94e 	bl	8002ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d020      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01b      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0210 	mvn.w	r2, #16
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2208      	movs	r2, #8
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f926 	bl	8002ed4 <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f919 	bl	8002ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f928 	bl	8002ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0201 	mvn.w	r2, #1
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe fd66 	bl	800178c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fa6f 	bl	80031c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f8f8 	bl	8002ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00c      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0220 	mvn.w	r2, #32
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fa42 	bl	80031b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_TIM_ConfigClockSource+0x1c>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e0b4      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x186>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d88:	d03e      	beq.n	8002e08 <HAL_TIM_ConfigClockSource+0xd4>
 8002d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8e:	f200 8087 	bhi.w	8002ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8002d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d96:	f000 8086 	beq.w	8002ea6 <HAL_TIM_ConfigClockSource+0x172>
 8002d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9e:	d87f      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8002da0:	2b70      	cmp	r3, #112	; 0x70
 8002da2:	d01a      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0xa6>
 8002da4:	2b70      	cmp	r3, #112	; 0x70
 8002da6:	d87b      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8002da8:	2b60      	cmp	r3, #96	; 0x60
 8002daa:	d050      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x11a>
 8002dac:	2b60      	cmp	r3, #96	; 0x60
 8002dae:	d877      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8002db0:	2b50      	cmp	r3, #80	; 0x50
 8002db2:	d03c      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0xfa>
 8002db4:	2b50      	cmp	r3, #80	; 0x50
 8002db6:	d873      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d058      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x13a>
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d86f      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc0:	2b30      	cmp	r3, #48	; 0x30
 8002dc2:	d064      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x15a>
 8002dc4:	2b30      	cmp	r3, #48	; 0x30
 8002dc6:	d86b      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d060      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x15a>
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d867      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d05c      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x15a>
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d05a      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x15a>
 8002dd8:	e062      	b.n	8002ea0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f000 f96a 	bl	80030c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	609a      	str	r2, [r3, #8]
      break;
 8002e06:	e04f      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6899      	ldr	r1, [r3, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f000 f953 	bl	80030c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e2a:	609a      	str	r2, [r3, #8]
      break;
 8002e2c:	e03c      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 f8ca 	bl	8002fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2150      	movs	r1, #80	; 0x50
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f921 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e02c      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f000 f8e8 	bl	8003030 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2160      	movs	r1, #96	; 0x60
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f911 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002e6c:	e01c      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6859      	ldr	r1, [r3, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f000 f8aa 	bl	8002fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2140      	movs	r1, #64	; 0x40
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f901 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002e8c:	e00c      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	4610      	mov	r0, r2
 8002e9a:	f000 f8f8 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002e9e:	e003      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea4:	e000      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <TIM_Base_SetConfig+0xc0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d007      	beq.n	8002f34 <TIM_Base_SetConfig+0x28>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d003      	beq.n	8002f34 <TIM_Base_SetConfig+0x28>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <TIM_Base_SetConfig+0xc4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d108      	bne.n	8002f46 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <TIM_Base_SetConfig+0xc0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0x52>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0x52>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <TIM_Base_SetConfig+0xc4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <TIM_Base_SetConfig+0xc0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d103      	bne.n	8002fa4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f023 0201 	bic.w	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	611a      	str	r2, [r3, #16]
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40000400 	.word	0x40000400

08002fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f023 0201 	bic.w	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f023 030a 	bic.w	r3, r3, #10
 8003010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	f023 0210 	bic.w	r2, r3, #16
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800305a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	031b      	lsls	r3, r3, #12
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800306c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	621a      	str	r2, [r3, #32]
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f043 0307 	orr.w	r3, r3, #7
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	609a      	str	r2, [r3, #8]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b087      	sub	sp, #28
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	021a      	lsls	r2, r3, #8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	609a      	str	r2, [r3, #8]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003114:	2302      	movs	r3, #2
 8003116:	e041      	b.n	800319c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d004      	beq.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10c      	bne.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	4313      	orrs	r3, r2
 8003180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40000400 	.word	0x40000400

080031b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	2600      	movs	r6, #0
 80031d8:	4d0c      	ldr	r5, [pc, #48]	; (800320c <__libc_init_array+0x38>)
 80031da:	4c0d      	ldr	r4, [pc, #52]	; (8003210 <__libc_init_array+0x3c>)
 80031dc:	1b64      	subs	r4, r4, r5
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	f000 f822 	bl	800322c <_init>
 80031e8:	2600      	movs	r6, #0
 80031ea:	4d0a      	ldr	r5, [pc, #40]	; (8003214 <__libc_init_array+0x40>)
 80031ec:	4c0a      	ldr	r4, [pc, #40]	; (8003218 <__libc_init_array+0x44>)
 80031ee:	1b64      	subs	r4, r4, r5
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f855 3b04 	ldr.w	r3, [r5], #4
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08003268 	.word	0x08003268
 8003210:	08003268 	.word	0x08003268
 8003214:	08003268 	.word	0x08003268
 8003218:	0800326c 	.word	0x0800326c

0800321c <memset>:
 800321c:	4603      	mov	r3, r0
 800321e:	4402      	add	r2, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <_init>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	bf00      	nop
 8003230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003232:	bc08      	pop	{r3}
 8003234:	469e      	mov	lr, r3
 8003236:	4770      	bx	lr

08003238 <_fini>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	bf00      	nop
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr
